<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ 和 Java：区别到底在哪里</title>
    <url>/posts/54e19ff4/</url>
    <content><![CDATA[<ul>
<li>C++ 与 Java 的区别<a id="more"></a>

</li>
</ul>
<p>在做 <em>C/C++</em> 开发的时候也会经常接触到 <em>Java</em> 相关的代码与知识，下面总结一下它们两者之间的区别：</p>
<ul>
<li><strong>编译运行方式的区别</strong></li>
</ul>
<p><em>C++</em> 先将代码编译成二进制文件，这个二进制文件是和平台有关的，所以常说 <em>C++</em> 不是跨平台的，操作系统将这个二进制文件读入内存执行。<br><em>Java</em> 是将源文件 <em>.java</em> 编译成 <em>.class</em> 字节码，再<strong>通过 <em>Jvm</em> 将字节码载入内存中翻译执行</strong>。所以 <em>Java</em> 的跨平台是通过与平台无关的字节码实现的。<br>因为 <em>Jvm</em> 加载字节码后是一边翻译一边执行的，执行效率会略低于 <em>C++</em>，但是在硬件成本极低的现在这已经没有那么重要了。</p>
<ul>
<li><strong>资源管理方式的区别</strong></li>
</ul>
<p><em>C++</em> 没有垃圾回收机制，因此 <em>C++</em> 在堆上开辟了一段新空间存放数据之后还需要手动释放空间。对于一些生命周期模糊的对象，<em>C++11</em> 之后使用了改进版的智能指针来管理 <em>new</em> 出来的对象，释放空间的任务交给智能指针自动完成，整个过程使用的是 <em>RAII</em> 技术，感兴趣的朋友可以参考上一篇智能指针的文章。<br><em>Java</em> 中有垃圾回收机制，堆中申请的空间 <em>GC</em> 会自动回收，而 <em>Java</em> 没有析构函数，也几乎很少用 <em>RAII</em> 来管理资源。</p>
<ul>
<li><strong>错误处理方式的区别</strong></li>
</ul>
<p><em>C++</em> 出于历史原因（<em>Google</em> 编码风格）或是性能原因（异常抛出时系统实时性受损）可以不使用异常，因为如果使用异常，代码中可能出现大量的 <code>try{...}catch{...}</code> 语句，代码将会变得冗长难读，而且<strong>在泛型编程的代码中我们甚至不知道可能会出现哪些异常</strong>。<br>所以 <strong><em>C++17</em> 之后，<em>C++</em> 对异常的处理标准变成了我们只能声明某些函数不能抛出异常</strong>。在运行之前，无论是代码声明还是编译器都不能发现异常。<br><em>Java</em> 中如果一个函数抛出异常，则强制它的调用方必须要处理异常。</p>
<ul>
<li><strong>变量语义的区别</strong></li>
</ul>
<p><em>C++</em> 中所有的变量缺省都是值语义，如果不使用指针或者引用，变量不会引用一个堆上的对象。<br>值语义的生命周期管理简单，因为它们都是 <em>stack object<em>，但是通过指针或引用来操作堆上对象的时候，</em>C++</em> 就需要考虑所指对象是否成功释放。<strong>智能指针能够将引用语义转化为值语义来解决上述对象生命周期的问题</strong>。由于 <em>memory locality<em>，</em>C++</em> 的值语义在性能上具有极大的优势。<br><em>Java</em> 中大部分变量则是引用语义，栈空间的变量都是引用类型，因此如果发生拷贝都是浅拷贝。</p>
<ul>
<li><strong>申请对象方式的区别</strong></li>
</ul>
<p>变量语义的区别带来了申请对象方式的区别。<br><em>C++</em> 可以自由控制对象是在堆上分配还是在栈上分配，堆上分配时间不确定，而栈上分配速度极快。<br><em>Java</em> 提倡所有对象都在堆上分配（原生类型也有对应的封装类），由 <em>GC</em> 统一管理对象生命周期。</p>
<ul>
<li><strong>对外暴露接口的区别</strong></li>
</ul>
<p><em>C++</em> 除了<strong>模板类需要将接口和实现都放在头文件中</strong>，其他情况下都是<strong>头文件提供对外接口，源文件实现对外接口</strong>。<br><em>Java</em> 主要是通过继承和多态来实现自定义接口。</p>
<ul>
<li><strong>引用外部类与依赖关系的区别</strong></li>
</ul>
<p><em>C++</em> 的头文件机制会引入大量不相关的代码依赖，编译过程中经常出现某个依赖的头文件不匹配，但是却找不到是如何使用这个头文件的，同样的，链接时也会出现库版本不对或者库的编译参数不匹配等错误。<br><em>Java</em> 的 <em>import</em> 机制以及 <em>package</em> 机制能够很好地解决上面的问题，用到哪个类就 <em>import</em> 哪个类，用到的库文件也能够编译成一个 <em>.jar</em> 包用于外部 <em>import</em>，简单高效。</p>
<ul>
<li><strong>编程范式的区别</strong></li>
</ul>
<p><em>C++</em> 是一门多范式的编程语言，支持面向过程编程、面向对象编程、泛型编程、函数式编程，开发灵活性高。<br><em>Java</em> 支持面向对象编程，或许还有泛型？</p>
<p>以上，<em>Java</em> 与 <em>C++</em> 相比，社区更加活跃，工具也更加丰富，开源库也多，难怪在讲究速度与效率的互联网行业如此受欢迎。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>使用简单的逻辑方法进行独立思考【转】</title>
    <url>/posts/8cfab1d1/</url>
    <content><![CDATA[<ul>
<li>可考证的数据很重要很重要很重要</li>
<li>理解集合的包含与被包含，以小见大往往不具有科学性严谨性</li>
<li>谨慎颠倒因果关系的事情与混淆无关事情之间的因果关系</li>
<li>做事要找到靠谱的基准线</li>
<li>思考要深入，要高维<a id="more"></a>

</li>
</ul>
<p>这是一个非常复杂的世界，这个世界上有很多各式各样的观点和思维方式，作为一个程序员的我，也会有程序员的思维方式，程序员的思维方式更接近数学的思维方式，数学的思维方式让可以很容易地理清楚这个混乱的世界，其实，并不需要太复杂的数学逻辑，只需要使用一些简单的数学方法，就可以大幅提升自己的认识能力，所以，在这里，记录一篇我自己的思维方式，一方面给大家做个参考，另一方面也供更高阶的人给我进行指正。算是“开源我的思维方式”，开放不仅仅是为了输出，更是为了看看有没有更好的方式。</p>
<p>我的思维方式中，使用数学逻辑的方式进行思考，通常来说，我会使用五步思考的方式：</p>
<p><strong>第一步：信息数据可考证</strong>。如果一个观点或是一个见解的数据是错误的，那么就会造成后面的观点全是错的，所以，<strong><em>首要的是要进行数据的查证或考证</em></strong>。一般来说，如果一篇文章的作者足够严谨的话，他的需要给他的数据建立相关的引用或是可以考证的方法方式。如果一篇文章中出现的是，“有关专家表明”、“美国科学家证明”、“经济学家指出”，但是没有任出处，也没有点明这个专家或是科学家的名字，或是，也没有说明或引用让读者可以自己去验证的方法。那么，其引用的话或是数据是无法考证的，如果是无法考证的，那么，这篇文章的水份就非常大了。一般来说，当我读到一篇文章中的东西没有可考证的来源或是方法时，通常来说，我就不会再读了，因为这篇文章的价值已经不大了，如果我关心这篇文章中的东西，我会改为自己去查找的方式，虽然变“重”了，但是很安全。（所以，像 Wikipedia 这样的网站是我经常去获得信息的地方，因为信息可以被考证是其基本价值观）</p>
<p><strong>第二步：处理集合和其包含关系</strong>。这是一个非常简单的人人都会的数学逻辑。比如：哲学家是人，柏拉图是哲学家，所以，柏拉图是人。就是一个在包含关系下的推理。你不要小看这个简单的逻辑，其实很多人并不会很好的应用，相反，<strong><em>当感情支配了他们以后，他们会以点代面，以特例代替普遍性</em></strong>。比如，地图炮就是一种，他们看到了多个案例，他们就开始把这个案例上升上更大的范围，比如：河南人新疆人都是小偷，上海人都是小市民。日本人都是变态和反人类……等等。除了这些地图炮外，还有否定整个人的，比如一个人犯了个错或是性格上有缺陷，就会把整个人全盘否定掉，员工抢个月饼就上升到其价值观有问题……。在数学的逻辑包含中，<strong><em>超集的定义可以适用于子集，通过子集的特征可以对超集进行探索，但是没法定义超集</em></strong>。另外，集合的大小也是一个很重要的事，幸存者偏差会是一个很容易让人掉下去的陷阱，因为可能会有很大的样本集可能在你的视线盲区。</p>
<p><strong>第三步：处理逻辑因果关系</strong>。所谓因果关系，其实就是分辨充分条件、必要条件和充分必要条件，然后处理其中的逻辑是否有关联性，而且有非常强的因果关系。没有能力分辨充分必要条件处理因果关系是很多人的硬伤。就像我在《<a href="https://coolshell.cn/articles/19271.html" target="_blank" rel="noopener">努力就会成功</a>》中说的一样，“努力” 和 “成功”是否有因果关系？各种逻辑混淆、概念偷换、模糊因果、似是而非全是在这里。比如：掩耳盗铃、刻舟求剑就是因果关系混乱的表现。<strong><em>人们会经常地混淆两个看来一起发生，但是并没有关联在一起的事</em></strong>。因果关系是最容易被模糊和偷换的，比如：很多人都容易混淆“加班”就会有“产出”，混淆了“行动”就会有“结果”，混淆了“抵制”就会赢得“尊重”，混淆了“批评”等于“反对”……等等。除了这些以外，微信公众号里的很多时评文章，他们的文章中的结论和其论据是没有因果关系的，好多文章就是混淆、模糊、偷换……<strong><em>因果关系出问题的文章读多了是对大脑有损伤的，要尽量远离</em></strong>。</p>
<p><strong>第四步：找到靠谱的基准线</strong>。就像我们写代码一样，我们都是会去找一些最佳实践或是业内标准，原因是因为，这样的东西都是经过长时间被这个世界上很多人Review过的，是值得依赖和靠谱的，他们会考虑到很多你没有考虑过的问题。所以，你也会看到很多时评都会找欧美发达国家的作参考的做法，因为毕竟人家的文化是相对比较文明、科学、开放和先进的。找到世界或是国际的通行标准，会更容易让人进步。比如：<strong><em>以开放包容加强沟通的心态，就会比封闭抵制敌对的心态要好得多得多，智者建桥，愚者建墙</em></strong>。当然，我们也开始发现，有一些事上，有利于自己的就对标，不利于自己的就不对标，而且，除了好的事，不好的事也在找欧美作对标，于是开始“多基准线”和“乱基准线”，这种方式需要我们小心分辨。</p>
<p><strong>第五步：更为深入和高维的思考</strong>。如果一件事情只在表面上进行思考其实只是一种浅度思考，在 Amazon，线上系统出现故障的时候，需要写一个 Correction of Errors 的报告，其中需要 Ask 5 Whys（参看 Wikipedia 的 Five Whys 词条），这种思考方式可以让你不断追问到深层次的本质问题，会让你自己做大量的调查和研究，让你不会成为一个只会在表面上进行思考的简单动物。比如：当你看到有出乎你意料的事件发生时（比如负面的暴力事件），你需要问一下，为什么会发生，原因是什么？然后罗列尽可能全的原因，再不断地追问并拷证下去（这跟写程序一样，需要从正向案例和负向案例进行考虑分析，才可能写出健壮性很强的代码），我们才会得出一个比较健壮的答案或结构。</p>
<p>需要注意的是，在上述的这五种思维方式下，你的思考是不可能快得起来的，这是一个“慢思考”（注：如果读过《<a href="https://book.douban.com/subject/10785583//" target="_blank" rel="noopener">思考，快与慢</a>》这本书的人就知道我在说什么），<strong><em>独立思考是需要使用大脑中的“慢系统”，慢系统是反人性的，所以，能真正做到独立思考的人很少</em></strong>。更多的人的“独立思考”其实只不过是毫无章法的乱思考罢了。</p>
<p>通过上述的这五点，我相信你是很容易识别或是分辨出哪些信息是靠谱的，哪些信息是很扯的，甚至会改善你自己的言论和思考。但是，请注意，这些方法并不能让你获得真理或是真相。但是这也够了，一个人如果拥有了能够分辨是非的能力，也是很不错的了。虽然不知道事实是什么，但是你也不会盲从和偏信，从而不会被人煽动，而成为幕后黑手的的一只“肉鸡”。</p>
<p>多说两句，下面是一些我个人的一些实践：</p>
<p>当新闻报道报道的不是客观事实，而是加入了很多观点，那么这篇新闻报道是不可信的。<br>对于评论性的文章，没有充足权威可信的论据时，不能完全相信。<br>不是当事人，不是见证人，还要装作自己是知情的……不知道这种人的自信怎么来的？<br>信息不公开的，并有意屏蔽信息的，不能作为可信的信息源。<br>当出现大是或是大非的事时，一定要非常小心，这个世界不存在完全的美和完全的丑，这样的观点通常来说都是危险的，此时要多看看不同角度的报道和评论，要多收集一些信息，还要多问问为什么。<br>欢迎你告诉我一些你的实践和思维方式。</p>
<p>转载自陈皓 CoolShell 博客<br>原文链接：<a href="https://coolshell.cn/articles/20533.html" target="_blank" rel="noopener">使用简单的逻辑方法进行独立思考</a></p>
]]></content>
      <categories>
        <category>思考与感悟</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>方阵中战斗力最弱的 K 行 - 使用 Multimap</title>
    <url>/posts/79da2c09/</url>
    <content><![CDATA[<ul>
<li>LeetCode 1341</li>
<li>Multimap</li>
</ul>
<p>题目链接：<a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/" target="_blank" rel="noopener">CLICK ME</a></p>
<a id="more"></a>

<p>给你一个大小为 <code>m * n</code> 的方阵 <code>mat</code>，方阵由若干军人和平民组成，分别用 0 和 1 表示。<br>请你返回方阵中战斗力最弱的 <em>k</em> 行的索引，按从最弱到最强排序。</p>
<p>如果第 <em>i</em> 行的军人数量少于第 <em>j</em> 行，或者两行军人数量相同但 <em>i</em> 小于 <em>j</em>，那么我们认为第 <em>i</em> 行的战斗力比第 <em>j</em> 行弱。</p>
<p>军人总是排在一行中的靠前位置，也就是说 1 总是出现在 0 之前。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">mat = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">       [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">       [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">       [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">       [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]],</span><br><span class="line">k = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>解题思路：<br>首先遍历 <code>mat</code>，确定每一行中的军人数量，形成 <strong>军人数量 - 索引号</strong> 结构，利用 <em>BST</em> 中 <code>key</code> 有序的特性考虑使用 <em>STL</em> 中的 <code>map</code>，考虑到存在战斗力相同但索引号不同的情况，应使用 <code>multimap</code>，最后通过迭代器输出 <code>multimap</code> 中的前 <em>k</em> 个数据的索引号即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">kWeakestRows</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> rows = mat.<span class="built_in">size</span>(), cols = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (rows &lt; <span class="number">1</span> || cols &lt; <span class="number">1</span> || k &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; powerMap;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> linePower = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num : mat[i]) &#123;</span><br><span class="line">                <span class="comment">// 提前结束统计</span></span><br><span class="line">                <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                linePower += num;</span><br><span class="line">            &#125;</span><br><span class="line">            powerMap.insert(<span class="built_in">std</span>::pair(linePower, i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> it = powerMap.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j) &#123;</span><br><span class="line">            res.push_back(it-&gt;second);</span><br><span class="line">            ++it;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>关于 <code>multimap</code> 用法的一些要点：</p>
<ul>
<li><p><code>multimap</code> 中保存的是有序的键值对，即 <code>std::pair&lt;K, V&gt;</code> 类型的元素，它能够保存重复的 <code>Key</code>，默认的比较键的函数为 <code>less&lt;K&gt;()</code>，因此本题直接用默认的比较器即可。</p>
</li>
<li><p><code>multimap</code> 的 <code>insert</code> 操作可以插入一个或多个元素并且总能成功，如果 <code>multimap</code> 中的 <code>Key</code> 已经存在，则插入到相同 <code>Key</code> 区域的上界，而 <code>map</code> 的 <code>insert</code> 操作在 <code>Key</code> 存在的情况下会插入失败。</p>
</li>
<li><p><code>multimap</code> 的 <code>erase</code> 操作既可以按照迭代器来擦除，也可以按照 <code>Key</code> 来擦除，如果使用迭代器擦除，指向被擦出元素的引用和迭代器会失效，其他元素的引用和迭代器不受影响；如果使用 <code>Key</code> 擦除，会移除键值为 <code>Key</code> 的所有元素。</p>
</li>
<li><p><code>multimap</code> 的 <code>find</code> 操作在所查 <code>Key</code> 存在的情况下可能返回任意一个对应的 <code>Value</code>。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Multimap</tag>
      </tags>
  </entry>
  <entry>
    <title>鸡蛋掉落 - 换一种角度的动态规划</title>
    <url>/posts/51cedb69/</url>
    <content><![CDATA[<ul>
<li>LeetCode 887</li>
<li>动态规划</li>
</ul>
<p>题目链接：<a href="https://leetcode-cn.com/problems/super-egg-drop/" target="_blank" rel="noopener">CLICK ME</a></p>
<a id="more"></a>

<p>你将获得 <em>K</em> 个鸡蛋，并可以使用一栋从 <em>1</em> 到 <em>N</em> 共有 <em>N</em> 层楼的建筑。</p>
<p>每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。</p>
<p>你知道存在楼层 <em>F</em> ，满足 <em>0 &lt;= F &lt;= N</em> 任何从高于 <em>F</em> 的楼层落下的鸡蛋都会碎，从 <em>F</em> 楼层或比它低的楼层落下的鸡蛋都不会破。</p>
<p>每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 <em>X</em> 扔下（满足 <em>1 &lt;= X &lt;= N</em>）。</p>
<p>你的目标是<strong>确切地知道</strong> <em>F</em> 的值是多少。</p>
<p>无论 <em>F</em> 的初始值如何，求确定 <em>F</em> 的值的<strong>最小移动次数</strong>是多少。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">K = <span class="number">1</span>, N = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>解题思路：</p>
<p>首先弄清题意。<br>现在我们有 <em>K</em> 个鸡蛋，<em>N</em> 层楼，我们需要找到一层楼，假设是 <em>F</em>，这层楼之下的楼扔鸡蛋都不会碎，而从包括这层楼开始的 <em>F ~ N</em> 层楼扔鸡蛋都会碎，我们需要在最少的次数内找到这层楼。</p>
<p>那直接二分查找不行吗，直接 <code>logN + 1</code> 次出结果？<br>当然是不行的，因为鸡蛋不够，只有 <em>K</em> 个，假设 <em>K = 1*，如果我在 *N/2</em> 楼扔，鸡蛋碎了，那么就没有办法继续试了，也就是说，如果只有一个鸡蛋，那么只能从 <em>1</em> 楼一直试到 <em>N</em> 楼，看第一次是碎在哪里，最差的情况下必须要尝试 <em>N</em> 次，这也是题目中提到的确切知道 <em>F</em> 的值的要求。至少要尝试 <em>N</em> 次才能保证确切地知道准确的楼层。</p>
<p>对于这种类型的题目，如果一开始想不到动态规划，我们就用最简单的方法，暴力递归尝试。</p>
<p>先假设 <code>P(K, N)</code> 表示有 <em>K</em> 个鸡蛋 <em>N</em> 层楼条件下的最少尝试次数，先看两个 <em>base case</em>：</p>
<ul>
<li><p>当 <em>N = 0</em> 时，没有楼层，鸡蛋肯定不会碎，不用尝试直接返回 <em>0</em>，<code>P(K, 0) = 0</code>；</p>
</li>
<li><p>当 <em>K = 1</em> 时，只有一个鸡蛋，只能挨层试，返回 <em>N</em>，<code>P(1, N) = N</code>；</p>
</li>
</ul>
<p>当 <em>N &gt; 0</em> 且 <em>K &gt; 1</em> 时，假设我们从第 <em>i</em> 层楼开始尝试第一个鸡蛋，那么存在两种情况：</p>
<ul>
<li><p>鸡蛋碎了，那么第 <em>i</em> 层楼之上的楼层就不用尝试了，还剩下 <em>i - 1</em> 层楼，剩下 <em>K - 1</em> 个鸡蛋，所以总的尝试的次数变为 <code>1 + P(K - 1, i - 1)</code>；</p>
</li>
<li><p>鸡蛋没碎，那么第 <em>i</em> 层楼以下的楼层就不用尝试了，还剩下 <em>N - i</em> 层楼，剩下 <em>K</em> 个鸡蛋，所以总的尝试次数变为 <code>1 + P(K, N - i)</code>；</p>
</li>
</ul>
<p>到这里需要注意了，因为我们需要知道确切的楼层，也就是说需要考虑最差的情况 - 即尝试次数最多的情况，所以我们需要取 <code>max{P(K - 1, i - 1), P(K, N - i)} + 1</code>，而这只是第一次扔在 <em>i</em> 位置的情况，<em>i</em> 的取值范围为 <em>1 ~ N*，在所有的尝试中我们要找到次数最少的那种，所以可以得到递推式 <code>P(K, N) = min{max{P(K - 1, i - 1), P(K, N - i)}(1 &lt;= i &lt;= N)} + 1</code>，添加一个 *hashmap</em> 用于子问题的存储，时间复杂度可以达到 O(K * N^2^)，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">superEggDrop</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (K &lt; <span class="number">1</span> || N &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">process</span>(K, N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (K == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> N;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> mapKey = <span class="built_in">std</span>::to_string(K) + <span class="string">"_"</span> + <span class="built_in">std</span>::to_string(N);</span><br><span class="line">        <span class="keyword">if</span> (resMap.<span class="built_in">find</span>(mapKey) != resMap.<span class="built_in">end</span>())</span><br><span class="line">            <span class="keyword">return</span> resMap[mapKey];</span><br><span class="line">        <span class="keyword">int</span> minTimes = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            minTimes = <span class="built_in">std</span>::<span class="built_in">min</span>(minTimes, <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="built_in">process</span>(K - <span class="number">1</span>, i - <span class="number">1</span>), <span class="built_in">process</span>(K, N - i)));</span><br><span class="line">        &#125;</span><br><span class="line">        resMap[mapKey] = minTimes + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> minTimes + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; resMap;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>问题到这里结束了吗，当然没有，上面这个代码虽然对，但是超时了，而就算改写成动态规划，时间复杂度仍然是没有变化的，我们可以试一下，用一个 <code>(K + 1) * (N + 1)</code> 的矩阵画出所有的可能性，那么 <em>K = 1</em> 的整行的 <code>dp[1][j] = j</code>；然后从左至右，从上到下更新矩阵中的值，变量 <em>t</em> 用于循环当前只有 <em>i</em> 层楼的时候，从第 <em>1</em> 层一直尝试到第 <em>i</em> 层，每次尝试都更新最小值，尝试完 <em>j</em> 个棋子 <em>i</em> 层楼后将结果填入 <code>dp[j][i]</code> 中，最后填入的 <code>dp[K][N]</code> 即为答案。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">superEggDrop</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (K &lt; <span class="number">1</span> || N &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (K == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> N;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(K + <span class="number">1</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N + <span class="number">1</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">            dp[<span class="number">1</span>][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= K; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> <span class="built_in">min</span> = INT_MAX;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= i; ++t) &#123;</span><br><span class="line">                    <span class="built_in">min</span> = <span class="built_in">std</span>::<span class="built_in">min</span>(<span class="built_in">min</span>, <span class="built_in">std</span>::<span class="built_in">max</span>(dp[j - <span class="number">1</span>][t - <span class="number">1</span>], dp[j][i - t]));</span><br><span class="line">                &#125;</span><br><span class="line">                dp[j][i] = <span class="built_in">min</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[K][N];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>正常的题目做到这里已经足够了，然而这仍然挡不住有二逼愿意在 <em>10000</em> 层楼扔鸡蛋的情况，是的，这种做法仍然是超时的。</p>
<p>我们换一种思路，<strong>题目中给出了 <em>K</em> 个鸡蛋 <em>N</em> 层楼让我们求最差情况下最少的尝试次数，这个问题等价于 <em>K</em> 个鸡蛋尝试 <em>M</em> 次最多能尝试出 <em>N</em> 层楼，它们只是一个逆否命题</strong>。</p>
<p>我们假设 <em>K</em> 个鸡蛋扔 <em>M</em> 次<strong>最多可以确定 <em>F</em> 层楼</strong>，<em>M</em> 越大 <em>F</em> 也越大，同样的，当 <em>M</em> 相同时，<em>K</em> 越多 <em>F</em> 也越大，也就是说矩阵向 <em>x</em> 方向和 <em>y</em> 方向都是非递减的，我们只需要判断确定的楼层数是否首次大于给定的楼层数就能判断当前的 <em>M</em> 是多少。</p>
<p>先看 <em>base case</em>：</p>
<ul>
<li><p>当 <em>K = 0</em> 时，没有鸡蛋，确认不了；</p>
</li>
<li><p>当 <em>K = 1</em> 时，扔 <em>M</em> 次最多能确定 <em>M</em> 层楼；</p>
</li>
<li><p>当 <em>M = 0</em> 时，一次不扔，确认不了；</p>
</li>
</ul>
<p>我们用 <code>dp[i][j]</code> 来表示 <em>i</em> 个鸡蛋扔 <em>j</em> 次最多能够确定的最多楼层数，既然楼层数最多，说明从第 <em>1</em> 次到第 <em>j</em> 次，每次扔鸡蛋的楼层都是最优的，假设第 <em>1</em> 次在 <em>F</em> 层扔：</p>
<ul>
<li><p>如果第 <em>1</em> 个鸡蛋碎了，那就看 <em>i - 1</em> 个鸡蛋扔 <em>j - 1</em> 次最多能确定多少层楼，即 <code>dp[i - 1][j - 1]</code></p>
</li>
<li><p>如果第 <em>1</em> 个鸡蛋没有碎，那就看 <em>i</em> 个鸡蛋扔 <em>j - 1</em> 次最多能确定多少层楼，即 <code>dp[i][j - 1]</code></p>
</li>
</ul>
<p>两种情况分别是向上能确定的最多楼层数量和向下能确定的最多楼层数量，注意这两个值都是最优的，也是唯一的，再加上本层楼，最后能得到 <code>dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1] + 1</code>，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">superEggDrop</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (K &lt; <span class="number">1</span> || N &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> throwTimes = log2N(N) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (K &gt;= throwTimes)</span><br><span class="line">            <span class="keyword">return</span> throwTimes;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(K, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="comment">// previous 保存 dp[i - 1][j - 1] 的值</span></span><br><span class="line">            <span class="comment">// 由于是从左至右更新的</span></span><br><span class="line">            <span class="comment">// dp[i] 是通过之前的 dp[i] 来更新当前的 dp[i]</span></span><br><span class="line">            <span class="keyword">int</span> previous = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = dp[i];</span><br><span class="line">                dp[i] = dp[i] + previous + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (dp[i] &gt;= N) &#123;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">                previous = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">log2N</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>代码中还有一点小的优化，当鸡蛋数量大于 <code>log2N(N)</code> 时，直接二分扔蛋就行了。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>从 RAII 到 smartPtr：智能指针剖析</title>
    <url>/posts/3a3d14bc/</url>
    <content><![CDATA[<h2 id="RAII-的基本概念"><a href="#RAII-的基本概念" class="headerlink" title="RAII 的基本概念"></a>RAII 的基本概念</h2><h3 id="什么是堆"><a href="#什么是堆" class="headerlink" title="什么是堆"></a>什么是堆</h3><p>在内存管理的范畴中，我们将程序中能够动态分配内存的区域称为堆 - <em>heap*，C/C++ 都提供了操作 *heap</em> 的函数或运算符：</p>
<ul>
<li><p>C 使用 <code>malloc/free</code> 操作 <em>heap</em></p>
</li>
<li><p>C++ 使用 <code>new/delete</code> 操作 <em>heap</em></p>
</li>
</ul>
<p>类似于下面的代码就会在堆上分配内存：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> vecPtr = <span class="keyword">new</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</span><br></pre></td></tr></table></figure>

<p>在堆上分配了内存之后的另一个问题就是释放内存，和 Java 的垃圾收集机制不同，C++ 的内存分配和释放都由内存管理器来操作，通常都不使用垃圾收集，我们需要做的只是把 <code>new</code> 出来的内存再通过 <code>delete</code> 释放掉即可，但是事实上真的这么简单吗？</p>
<h3 id="什么是栈"><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h3><p>函数在运行过程中调用数据、生成数据时使用的内存区域称为栈 - <em>stack</em>，它和数据结构中的栈类似，都是 LIFO。以 x86 为例，<strong>栈的增长方向是由高地址向低地址增长</strong>，函数之间调用时，调用函数会将自己的参数压入栈中，同时把自己下一行的指令也压入栈中，再跳转到新的函数并调整栈指针，新的函数在执行完之后会根据栈中保存的调用函数的地址<strong>重新回到调用函数未执行的地方继续执行</strong>。</p>
<p>由此可见，栈上空间的分配和释放逻辑都十分简单，只要移动栈指针即可，具体分配空间的时候，每个函数分到的属于自己的那一份称为栈帧 - <em>stack frame</em>，即使是有构造函数和析构函数的情况下，C++ 的编译器也会在栈帧的适当位置添加对构造函数和析构函数的调用。这个过程中，<strong>就算函数抛出了异常，编译器也会自动调用析构函数</strong>，来看一个例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Obj()&#123; <span class="built_in">puts</span>(<span class="string">"Obj()"</span>); &#125;</span><br><span class="line">    ~Obj()&#123; <span class="built_in">puts</span>(<span class="string">"~Obj()"</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    Obj obj;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"func error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        func(<span class="number">0</span>);</span><br><span class="line">        func(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="keyword">const</span> <span class="keyword">char</span>* str)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">    Obj()</span><br><span class="line">    ~Obj()</span><br><span class="line">    Obj()</span><br><span class="line">    ~Obj()</span><br><span class="line">    func error</span><br></pre></td></tr></table></figure>

<p>也就是说，<code>func(1)</code> 在将异常抛出之前就已经调用了自身的析构函数，而这点正是 RAII 的基础，也是最重要的部分。</p>
<h3 id="什么是-RAII"><a href="#什么是-RAII" class="headerlink" title="什么是 RAII"></a>什么是 RAII</h3><p>RAII - <em>Resource Acquisition Is Initialization</em>，资源获取即初始化，<strong>RAII 是一种资源管理方式，它通过栈和析构函数来管理包括堆在内的所有资源</strong>，主流的编程语言中只有 C++ 是使用 RAII 来管理资源的，下面来看一个 C++ 工厂方法的简单示例，为了防止发生对象切片的错误（<strong>C++ 的值语义特点所带来的的编码陷阱：函数返回类型为父类对象，实际返回的为子类对象</strong>），工厂方法需要返回一个父类对象的指针或者是引用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++11 后建议使用强类型枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">animalType</span> &#123;</span></span><br><span class="line">    cat,</span><br><span class="line">    dog,</span><br><span class="line">    fox,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span> &#123;</span>...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span> :</span> <span class="keyword">public</span> animal &#123;...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span> :</span> <span class="keyword">public</span> animal &#123;...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fox</span> :</span> <span class="keyword">public</span> animal &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">animal* <span class="title">buyNewAnimal</span><span class="params">(animalType ani_type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(ani_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> animalType::cat :</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> cat();</span><br><span class="line">        <span class="keyword">case</span> animalType::dog :</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> dog();</span><br><span class="line">        <span class="keyword">case</span> animalType::fox :</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> fox();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时返回的是一个 <code>animal</code> 类型的父类指针，指向的是子类对象，问题来了，<code>buyNewAnimal</code> 函数返回 <code>animal</code> 指针后便退出了，堆上已经开辟出空间 <code>animal</code> 子类的对应空间，如何才能保证这一部分内存不泄漏？</p>
<h2 id="智能指针的基本概念"><a href="#智能指针的基本概念" class="headerlink" title="智能指针的基本概念"></a>智能指针的基本概念</h2><p>C 和 C++ 的老程序员都曾大量接触过裸指针，都曾一边享受着指针带来的便利一边不停地给自己挖坑埋坑，在介绍智能指针之前，先看看使用指针的时候常见的坑有哪些：</p>
<ul>
<li><p>忘记 <code>delete/free</code> 导致内存泄露</p>
</li>
<li><p>同一个指针释放多次，程序崩溃</p>
</li>
<li><p>逻辑 bug，写了 <code>delete/free</code> 结果没有执行到</p>
</li>
<li><p><code>delete/free</code> 之前抛出了异常</p>
</li>
</ul>
<p>前面已经介绍过了，C++ 没有自动内存回收机制，<code>new</code> 出来的必须要自己 <code>delete</code> 掉，智能指针的引入，让程序员可以不再关注资源的释放，它能够保证程序无论正常或异常，在到期的时候都能通过 RAII 机制成功回收。</p>
<p>来看上一节中 <code>buyNewAnimal</code> 函数返回的 <code>animal</code> 指针，<strong>只需要将这个返回值放入一个本地变量中，确保这个变量析构的时候会删除上面的对象</strong>即可：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">smartAnimalPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">smartAnimalPtr</span><span class="params">(animal* animalPtr)</span> : <span class="title">animalPtr_</span><span class="params">(animalPtr)</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">// delete nullptr is legal operation</span></span><br><span class="line">    ~smartAnimalPtr()&#123;</span><br><span class="line">        <span class="keyword">delete</span> animalPtr_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">animal* <span class="title">getPtr</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> animalPtr_;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    animal* animalPtr_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">smartAnimalPtr <span class="title">newAnimalPtr</span><span class="params">(buyNewAnimal(dog))</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>func</code> 调用的 <code>buyNewAnimal</code> 函数返回值被 <code>newAnimalPtr</code> 接管，使用者可以直接调用 <code>newAnimalPtr.getPtr()</code> 使用原指针，当 <code>func</code> 函数结束时，<code>newAnimalPtr</code> 析构，<code>animalPtr_</code> 所指向的区域被释放，整个过程不需要手动调用 <code>delete</code>，而是通过 RAII 巧妙地交给编译器处理了。</p>
<p>除了 <code>delete</code> 之外，在本地变量的析构函数中还可以执行以下操作：</p>
<ul>
<li>释放同步锁，如下面的多线程累加范例：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::mutex sum_lock;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>&amp; sum, <span class="keyword">int</span>&amp; num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">// 结束一轮 while 后 sum_lock 自动释放</span></span><br><span class="line">        <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(sum_lock)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            num += <span class="number">1</span>;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::thread&gt; tdVec;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)&#123;</span><br><span class="line">        <span class="built_in">std</span>::thread td = <span class="built_in">std</span>::thread(add, <span class="built_in">std</span>::ref(sum), <span class="built_in">std</span>::ref(num));</span><br><span class="line">        tdVec.emplace_back(<span class="built_in">std</span>::<span class="built_in">move</span>(td));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// std::mem_fn can generate an object for pointers to members as well as ref and pointers to an object</span></span><br><span class="line">    <span class="built_in">std</span>::for_each(tdVec.<span class="built_in">begin</span>(), tdVec.<span class="built_in">end</span>(), <span class="built_in">std</span>::mem_fn(&amp;<span class="built_in">std</span>::thread::join));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭文件，如 <code>fstream</code> 析构时会调用 <code>close</code> 以防止流对象销毁后还与打开的文件相关联</li>
</ul>
<p>上面实现的 <code>smartAnimalPtr</code> 已经可以算是一个简单的智能指针啦。</p>
<h2 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a>auto_ptr</h2><p>我们将 <code>smartAnimalPtr</code> 模板化，并添加一些常用的指针操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">smartAutoPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">smartAutoPtr</span><span class="params">(T* ptr)</span> : <span class="title">ptr_</span><span class="params">(ptr)</span> </span>&#123;&#125;</span><br><span class="line">    ~smartAutoPtr() &#123; <span class="keyword">delete</span> ptr_; &#125;</span><br><span class="line">    <span class="function">T* <span class="title">getPtr</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *ptr_; &#125;</span><br><span class="line">    <span class="comment">// 重载 bool 转换运算符</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* ptr_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面的代码存在一个很严重的问题，当 <code>smartAutoPtr</code> 拷贝构造或者被赋值时，<strong>因为有两个指针指向同一片区域，RAII 会让这片区域释放两次</strong>！解决这个问题的第一种方法、也是最简单的方法是禁用这两个函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">smartAutoPtr(<span class="keyword">const</span> smartAutoPtr&lt;T&gt;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">smartAutoPtr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> smartAutoPtr&lt;T&gt;&amp;) = <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure>

<p>第二种方法，我们可以在拷贝构造和赋值时转移指针的所有权，而这也正是 <code>auto_ptr</code> 的处理方式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">smartAutoPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">smartAutoPtr</span><span class="params">(T* ptr)</span> : <span class="title">ptr_</span><span class="params">(ptr)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    smartAutoPtr(<span class="keyword">const</span> smartAutoPtr&amp; _Right) &#123;</span><br><span class="line">        ptr_ = _Right.<span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy and swap</span></span><br><span class="line">    <span class="comment">// _Right --&gt; smartAutoPtr(_Right) --&gt; _New</span></span><br><span class="line">    smartAutoPtr&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> smartAutoPtr&amp; _Right) &#123;</span><br><span class="line">        smartAutoPtr(_Right).reset(*<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~smartAutoPtr() &#123; <span class="keyword">delete</span> ptr_; &#125;</span><br><span class="line">    <span class="function">T* <span class="title">getPtr</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *ptr_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 剥夺原 smartAutoPtr 对指针的所有权给新 smartAutoPtr</span></span><br><span class="line">    <span class="function">T* <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T* _Tmp = ptr_;</span><br><span class="line">        ptr_ = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> _Tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(smartAutoPtr&amp; _New)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">        swap(ptr_, _New.ptr_);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* ptr_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>赋值运算符的重载利用了 <em>copy and swap</em> 技术，即先通过拷贝构造创建一个新的对象，再交换它们的指针，这样能够保证强安全性，构造是否成功完全不会破坏赋值运算符两边的数据。</p>
<p>由上面的代码不难看出，<code>auto_ptr</code> 在拷贝构造和赋值运算时都会完全剥夺原对象对指针的所有权，也就是说除了最后一个 <code>auto_ptr</code>，其余所有的 <code>auto_ptr</code> 都变成了 <code>nullptr</code>，全部失效了，这样会带来几个问题：</p>
<ul>
<li><p><strong>STL 对容器类型的要求是要有值语义，即可以复制和赋值</strong>。<code>auto_ptr</code> 的复制和赋值经过了 <code>release</code> 和 <code>reset</code> 的处理，<strong>因此 <code>auto_ptr</code> 对象不能作为 STL 的容器元素</strong>。</p>
</li>
<li><p>将 <code>auto_ptr</code> 作为函数参数按值传递时，函数会在其作用域中生成该 <code>auto_ptr</code> 的拷贝，此时的指针所有权已经转移给了这个临时对象，当函数退出时，该临时对象析构，原 <code>auto_ptr</code> 所指向的对象也被删除了，<strong>如果不得不使用 <code>auto_ptr</code> 作为函数参数时，最好使用 <code>const auto_ptr&amp;</code> 的方式</strong>。</p>
</li>
</ul>
<p>值得注意的是，<code>auto_ptr</code> 已经从 C++17 标准中删除了。</p>
<h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2><p><code>unique_ptr</code> 与 <code>auto_ptr</code> 在特性上相差不大，<strong>同一时刻只能有唯一的一个 <code>unique_ptr</code> 指向给定的对象</strong>，<code>unique_ptr</code> 在处理智能指针拷贝构造和赋值时发生的浅拷贝问题上采用了 <code>smartAutoPtr</code> 所使用的方法一，即直接将拷贝构造和赋值运算禁用，此外，<code>unique_ptr</code> 还引入了移动构造，在 C++11 之前，如果想要将源对象的状态转移到目标对象只能通过拷贝构造，C++11 开始，我们不再需要复制对象，只需要移动对象即可，也就是把源对象的资源控制权转交给目标对象，这个过程中不再需要多余的复制操作。我们将上面的 <code>auto_ptr</code> 稍微修改可以得到一个简化版的 <code>unique_ptr</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">smartUniquePtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">smartUniquePtr</span><span class="params">(T* ptr)</span> : <span class="title">ptr_</span><span class="params">(ptr)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动构造函数不会在类中默认生成</span></span><br><span class="line">    smartUniquePtr(smartUniquePtr&amp;&amp; _Right) &#123;</span><br><span class="line">        ptr_ = _Right.<span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换移动构造</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    smartUniquePtr(smartUniquePtr&lt;U&gt;&amp;&amp; _Right) &#123;</span><br><span class="line">        ptr_ = _Right.<span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// necessary</span></span><br><span class="line">    smartUniquePtr(<span class="keyword">const</span> smartUniquePtr&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    smartUniquePtr(<span class="keyword">const</span> smartUniquePtr&lt;U&gt;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// new _Right --&gt; *this</span></span><br><span class="line">    smartUniquePtr&amp; <span class="keyword">operator</span>=(smartUniquePtr _Right) &#123;</span><br><span class="line">        _Right.reset(*<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~smartUniquePtr() &#123; <span class="keyword">delete</span> ptr_; &#125;</span><br><span class="line">    <span class="function">T* <span class="title">getPtr</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *ptr_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T* <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T* _Tmp = ptr_;</span><br><span class="line">        ptr_ = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> _Tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(smartUniquePtr&amp; _New)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">        swap(ptr_, _New.ptr_);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* ptr_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面的代码需要注意，<strong>在定义了移动构造函数的情况下，如果没有提供拷贝构造函数，会自动禁用拷贝构造函数</strong>。<br>但是，<strong>编译器并不会把 <code>smartUniquePtr(smartUniquePtr&lt;U&gt;&amp;&amp; _Right) {}</code> 看作是移动构造，换句话说，编译器不会把所有的模板函数看作构造函数</strong>，如果想消除代码重复，仍然需要将拷贝构造函数手动禁用。<br>再看 <code>smartUniquePtr</code> 的使用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// buyNewAnimal 返回的是一个临时变量，调用移动构造函数</span></span><br><span class="line">smartUniquePtr&lt;animal&gt; ptr1&#123; buyNewAnimal(animalType::dog) &#125;;</span><br><span class="line">smartUniquePtr&lt;animal&gt; ptr2&#123; <span class="literal">nullptr</span> &#125;;</span><br><span class="line"><span class="comment">// ptr1 是一个左值，需要转换成右值</span></span><br><span class="line"><span class="comment">// ptr1 --&gt; temp rv obj --&gt; ptr3</span></span><br><span class="line">smartUniquePtr&lt;animal&gt; ptr3 = <span class="built_in">std</span>::<span class="built_in">move</span>(ptr1);</span><br><span class="line">smartUniquePtr&lt;animal&gt; ptr4&#123; <span class="built_in">std</span>::<span class="built_in">move</span>(ptr3) &#125;;</span><br></pre></td></tr></table></figure>

<p><code>unique_ptr</code> 除了能够支持管理堆上分配的内存，还能够通过移动语义使 <code>unique_ptr</code> 对象与容器兼容。<br>但 <code>unique_ptr</code> 仍然有一些不足，它仍然无法避免重复释放的问题，使用移动语义之后的源对象也仍然失去了对原指针的所有权，无法再次使用。<br>要避免上述这些情况，最好的办法是使用带有引用计数功能的智能指针。</p>
<h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><p>在 <code>unique_ptr</code> 中，一个对象只能被一个 <code>unique_ptr</code> 拥有，这在大部分场合是无法满足要求的，更常见的是多个智能指针同时拥有一个对象，只有当所有的指针都失效了，才会删除该对象，这样的智能指针就是 <code>shared_ptr</code>。<br><code>shared_ptr</code> 的底层通过引用计数来进行空间管理，每当有一个新的指针指向这块空间时，引用计数加一，反之减一，直到引用计数为零时才释放空间。<br>来看一下 <code>shared_ptr</code> 的简单实现，和 <code>unique_ptr</code> 的不同之处在于它需要实现共享的引用计数，因此我们<strong>在堆上 <code>new</code> 一个 <code>ref_count</code> 出来，并在 <code>shared_ptr</code> 中保存指向它的指针</strong>，完整的操作需要包含 <code>add</code>、<code>reduce</code> 和 <code>get</code> 三种行为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ref_count</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ref_count() <span class="keyword">noexcept</span> : cnt_(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123; ++cnt_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">reduce</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> --cnt_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> cnt_; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">long</span> cnt_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">smartSharedPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">smartSharedPtr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">smartSharedPtr</span><span class="params">(T* ptr = <span class="literal">nullptr</span>)</span> : <span class="title">ptr_</span><span class="params">(ptr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ptr_) &#123;</span><br><span class="line">            refptr_ = <span class="keyword">new</span> ref_count();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy constructor ref_count add</span></span><br><span class="line">    smartSharedPtr(<span class="keyword">const</span> smartShared&amp; _Right) &#123;</span><br><span class="line">        ptr_ = _Right.ptr_;</span><br><span class="line">        <span class="keyword">if</span> (ptr_) &#123;</span><br><span class="line">            _Right.refptr_-&gt;add();</span><br><span class="line">            refptr_ = _Right.refptr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// template copy constructor</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    smartSharedPtr(<span class="keyword">const</span> smartSharedPtr&lt;U&gt;&amp; _Right) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        ptr_ = _Right.ptr_;</span><br><span class="line">        <span class="keyword">if</span> (ptr_) &#123;</span><br><span class="line">            _Right.refptr_-&gt;add();</span><br><span class="line">            refptr_ = _Right.refptr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// template move constructor</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    smartSharedPtr(smartSharedPtr&lt;U&gt;&amp;&amp; _Right) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        ptr_ = _Right.ptr_;</span><br><span class="line">        <span class="keyword">if</span> (ptr_) &#123;</span><br><span class="line">            refptr_ = _Right.refptr_;</span><br><span class="line">            _Right.ptr_ = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overload assignment operator</span></span><br><span class="line">    smartSharedPtr&amp; <span class="keyword">operator</span>=(smartSharedPtr _Right) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        _Right.swap(*<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~smartSharedPtr() &#123;</span><br><span class="line">        <span class="comment">// 每次析构时都需要将 ref_count 减一</span></span><br><span class="line">        <span class="keyword">if</span> (ptr_ &amp;&amp; !refptr_-&gt;reduce()) &#123;</span><br><span class="line">            <span class="keyword">delete</span> ptr_;</span><br><span class="line">            <span class="keyword">delete</span> ref_count_;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get ref_count</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getRefCnt</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ptr_) &#123;</span><br><span class="line">            <span class="keyword">return</span> refptr_-&gt;<span class="built_in">get</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T* <span class="title">getptr</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> <span class="keyword">noexcept</span> &#123; <span class="keyword">return</span> *ptr_; &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> <span class="keyword">noexcept</span> &#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(smartSharedPtr&amp; _New)</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">        swap(ptr_, _New.ptr_);</span><br><span class="line">        swap(refptr_, _New.refptr_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* ptr_;</span><br><span class="line">    ref_count* refptr_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(smartSharedPtr&lt;T&gt;&amp; _Left, smartSharedPtr&lt;T&gt;&amp; _Right)</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">    _Left.swap(_Right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，需要注意以下几点：</p>
<ul>
<li><p>为了让编译器优化代码，需要为移动构造函数添加 <code>noexcept</code> 声明</p>
</li>
<li><p><code>refptr_</code> 为每个类的私有成员，是不能在 <code>smartSharedPtr</code> 对象之间共享的，需要添加友元类的声明</p>
</li>
<li><p>按照现代 C++ 标准需要设计支持移动的对象，即对象不仅要有 <code>swap</code> 成员函数与另一个对象交换，在其所属名空间下还需要需要有一个全局 <code>swap</code> 函数提供给其他对象使用</p>
</li>
<li><p>智能指针还需要实现类型转换的函数模板，这里给出 <code>dynamic_cast</code>，其他实现与此类似：</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for pointer type conversion</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">smartSharedPtr(<span class="keyword">const</span> smartSharedPtr&lt;U&gt;&amp; _Right, T* ptr) &#123;</span><br><span class="line">    ptr_ = ptr;</span><br><span class="line">    <span class="keyword">if</span> (ptr_) &#123;</span><br><span class="line">        _Right.refptr_-&gt;add();</span><br><span class="line">        refptr_ = _Right.refptr_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出 _Right 的 ptr_ 转换成 T 类型后将 ref_count++ 并包装返回</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">smartSharedPtr&lt;T&gt; <span class="title">dynamic_pointer_cast</span><span class="params">(<span class="keyword">const</span> smartSharedPtr&lt;U&gt;&amp; _Right)</span> </span>&#123;</span><br><span class="line">    T* _Tmp = <span class="keyword">dynamic_cast</span>&lt;T*&gt;(_Right.getptr());</span><br><span class="line">    <span class="keyword">return</span> smartSharedPtr&lt;T&gt;(_Right, _Tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h2><p><code>shared_ptr</code> 通常被称为强智能指针，而 <code>weak_ptr</code> 被称为弱智能指针，介绍 <code>weak_ptr</code> 之前先看下面的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A () &#123;&#125;</span><br><span class="line">    ~A () &#123;&#125;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;B&gt; ptrb;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B () &#123;&#125;</span><br><span class="line">    ~B () &#123;&#125;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;A&gt; ptra;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ref_count of A is 1</span></span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line">    <span class="comment">// ref_count of B is 1</span></span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line">    <span class="comment">// ref_count of B is 2</span></span><br><span class="line">    ptra-&gt;ptrb = ptrb;</span><br><span class="line">    <span class="comment">// ref_count of A is 2</span></span><br><span class="line">    ptrb-&gt;ptra = ptra;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ptra.use_count() &lt;&lt; ptrb.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>main</code> 结束时，两个对象的引用计数分别减到 1，因为不等于 0，不满足对象的空间释放条件，最终导致内存泄露，这个问题被称为 <code>shared_ptr</code> 的循环引用问题。</p>
<p>那么怎么解决这个问题呢？当然是通过 <code>weak_ptr</code>，<code>weak_ptr</code> 对 <code>shared_ptr</code> 管理的对象存在非拥有性引用，换句话说，<strong>它表达的是一种临时所有权 - 如果某个对象只有存在的时候才需要被访问，而且随时可能会被删除导致指针失效时，就使用 <code>weak_ptr</code> 跟踪该对象</strong>，当 <code>weak_ptr</code> 需要使用该对象时，需要将其升级为 <code>shared_ptr</code>，如果原 <code>shared_ptr</code> 销毁，这个对象的生命周期则会延长到这个升级的 <code>shared_ptr</code> 被销毁为止。</p>
<p><code>weak_ptr</code> 的特点可以总结为下面几点：</p>
<ul>
<li><p><code>weak_ptr</code> 中没有提供一般的指针操作，如果要访问资源必须通过 <code>lock</code> 将其升级为 <code>shared_ptr</code></p>
</li>
<li><p><strong>定义对象的时候使用 <code>shared_ptr</code> ，引用对象的时候使用 <code>weak_ptr</code></strong></p>
</li>
<li><p><code>weak_ptr</code> 不会改变对象的引用计数，它只是一个观察者的角色</p>
</li>
</ul>
<p>上面的代码使用 <code>weak_ptr</code> 可以修改为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A () &#123;&#125;</span><br><span class="line">    ~A () &#123;&#125;</span><br><span class="line">    weak_ptr&lt;B&gt; ptrb;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B () &#123;&#125;</span><br><span class="line">    ~B () &#123;&#125;</span><br><span class="line">    weak_ptr&lt;A&gt; ptra;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ref_count of A is 1</span></span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line">    <span class="comment">// ref_count of B is 1</span></span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line">    <span class="comment">// ref_count of B is 1</span></span><br><span class="line">    ptra-&gt;ptrb = ptrb;</span><br><span class="line">    <span class="comment">// ref_count of A is 1</span></span><br><span class="line">    ptrb-&gt;ptra = ptra;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ptra.use_count() &lt;&lt; ptrb.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="智能指针的使用"><a href="#智能指针的使用" class="headerlink" title="智能指针的使用"></a>智能指针的使用</h2><h3 id="Deleter"><a href="#Deleter" class="headerlink" title="Deleter"></a>Deleter</h3><p><code>unique_ptr</code> 的声明为：<code>std::unique_ptr&lt;T, Deleter&gt;::unique_ptr</code><br>前面已经说过，智能指针在析构的时候除了 delete 堆上空间，还可以关闭文件、释放同步锁等，<code>unique_ptr</code> 可以让我们自定义指针释放资源的方式，方法是<strong>传入一个函数对象</strong>，我们用 lambda 表达式来简单实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::unique_ptr&lt;FILE, std::function&lt;void(FILE*)&gt;&gt; openFile(fopen("config.yml", "w"), [](FILE* fp)-&gt;void&#123; fclose(fp); &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>shared_ptr</code> 的 <code>Deleter</code> 的使用方法与 <code>unique_ptr</code> 稍有不同：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span> &#123;</span></span><br><span class="line">    foo() &#123;&#125;</span><br><span class="line">    ~foo() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">deleter</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(func* fp)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> fp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;foo&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> foo, deleter())</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多线程场景下的智能指针"><a href="#多线程场景下的智能指针" class="headerlink" title="多线程场景下的智能指针"></a>多线程场景下的智能指针</h3><p>多个线程访问同一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他操作，调用这个对象的行为都可以获得正确的结果，那么这个对象就是线程安全的。</p>
<p><code>shared_ptr/weak_ptr</code> 的线程安全可以分为两个部分讨论：</p>
<ul>
<li><p><code>shared_ptr/weak_ptr</code> 管理的对象是否是线程安全的</p>
</li>
<li><p><code>shared_ptr/weak_ptr</code> 对象本身是否是线程安全的</p>
</li>
</ul>
<p>第一个问题，<code>shared_ptr/weak_ptr</code> 能够实现多线程下其管理的对象是线程安全的，多线程下，一个常见的错误是当一个线程已经将堆上的对象析构了，此时另一个线程去访问已经析构了的对象，产生未定义行为。</p>
<p>muduo 网络库中的 Observable 类给出了一个解决方法：通过 weak_ptr 探查对象的生死：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register_</span><span class="params">(<span class="keyword">const</span> weak_ptr&lt;Observer&gt; x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> MutexLock mutex_;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weak_ptr&lt;Observer&gt;&gt; observers_;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weak_ptr&lt;Observer&gt;&gt;::iterator Iterator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Observable::notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">    Iterator it = observers_.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span> (it != observers_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        <span class="comment">// 遍历 vector 依次尝试 promote weak_ptr</span></span><br><span class="line">        <span class="comment">// lock 是线程安全的</span></span><br><span class="line">        <span class="function"><span class="built_in">shared_ptr</span>&lt;Observer&gt; <span class="title">obj</span><span class="params">(it-&gt;lock())</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">            obj-&gt;update();</span><br><span class="line">            ++it;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// promote 失败说明对象已经销毁，从 vector 中删除 weak_ptr</span></span><br><span class="line">            it = observers_.erase(it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个问题，<code>shared_ptr</code> 本身并不是线程安全的，它的引用计数是安全无锁的，但是对象的读写不是，因为 <code>shared_ptr</code> 有两个数据成员，读写操作不能原子化。</p>
<p>如果要通过多个线程读写同一个 <code>shared_ptr</code> 对象，需要加锁。<br>继续看一个 muduo 网络库中的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;foo&gt; localPtr;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">        localPtr = globalPtr;</span><br><span class="line">    &#125;</span><br><span class="line">    doit(localPtr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;foo&gt; <span class="title">newPtr</span><span class="params">(<span class="keyword">new</span> foo)</span></span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">        globalPtr = newPtr;</span><br><span class="line">    &#125;</span><br><span class="line">    doit(newPtr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考文献：</p>
<p><a href="https://book.douban.com/subject/20471211/" target="_blank" rel="noopener">Linux 多线程服务端编程</a><br><a href="https://book.douban.com/subject/25923597/" target="_blank" rel="noopener">Effective Modern C++</a><br><a href="https://en.cppreference.com/w/Main_Page" target="_blank" rel="noopener">cppreference</a></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>智能指针</tag>
        <tag>RAII</tag>
      </tags>
  </entry>
</search>
