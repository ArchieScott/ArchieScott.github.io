<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CMake 项目链接时找不到静态库</title>
    <url>/posts/1c6f4546/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>解决 CLion 项目链接时找不到链接库的问题</li>
</ul>
</blockquote>
<a id="more"></a>
<p>最近在用 cmake 管理项目的时候，写完 test 后发现无论如何都没有办法链接成功，报错内容如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">/usr/bin/ld: can<span class="number">'</span>t <span class="built_in">find</span> -lTripod_Lib</span><br><span class="line">error: ld returned <span class="number">1</span> <span class="built_in">exit</span> status</span><br></pre></td></tr></table></figure>
<p><code>Tripod_Lib</code> 是之前生成的静态库，放在 lib 目录下。</p>
<p>手动用 g++ 命令测试能够成功编译链接，看来真的是因为找不到库😓</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">g++ test/test.cc -o tb -I ./src ./lib/Tripod_Lib.a</span><br></pre></td></tr></table></figure>
<p>折磨了两天，最终还是在 <a href="https://cmake.org/cmake/help/v3.15/command/link_directories.html" target="_blank" rel="noopener">官方文档</a> 上找到了原因：<br>
<em>Specify the paths in which the linker should search for libraries. <strong>The command will apply only to targets created after it is called.</strong></em></p>
<p>也是就说，<code>link_directories()</code> 需要放在 <code>add_library()</code> 和 <code>add_executable()</code> 的前面。<br>
此外还要注意，最后链接的静态库名字里要带上 .a 的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION <span class="number">3.15</span>)</span><br><span class="line">project(Tripod)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin)</span><br><span class="line"><span class="built_in">set</span>(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/lib)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_DEBUG_POSTFIX <span class="string">"_Base"</span>)</span><br><span class="line"></span><br><span class="line">aux_source_directory($&#123;PROJECT_SOURCE_DIR&#125;/src SRC_DIR)</span><br><span class="line"></span><br><span class="line">link_directories($&#123;PROJECT_SOURCE_DIR&#125;/lib)</span><br><span class="line"></span><br><span class="line">add_library(_Tripod STATIC $&#123;SRC_DIR&#125;)</span><br><span class="line"></span><br><span class="line">add_executable(Tripod test/test.cc)</span><br><span class="line"></span><br><span class="line">target_link_libraries(Tripod lib_Tripod$&#123;CMAKE_DEBUG_POSTFIX&#125;.a)</span><br></pre></td></tr></table></figure>
<p>必须要吐槽 Cmake 的文档里真是一个例子都没有啊，看完之后模棱两可的东西大把，好像被人在嘴里硬塞了一把屎一样，数学课本都还有例题呢，坑货😡😡😡</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>CMake</tag>
        <tag>Debug</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 下配置 CLion + Cygwin 开发环境</title>
    <url>/posts/1f8822d7/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>Windows 下配置 CLion Toolchain 为 Cygwin</li>
</ul>
</blockquote>
<a id="more"></a>
<p>之前已经在 CLion 中配置好了 MinGW，但是 MinGW 下无法调用 POSIX API，因此在 CLion 下重新配置 Toolchain 为 Cygwin，记录一下过程：<br>
首先要说，MinGW 与 Cygwin 还是有区别的：</p>
<ul>
<li>Cygwin 是使用一个 dll 来模拟 Linux 环境，它本质上是一个在 windows 上的可运行 POSIX 应用程序的工具环境</li>
<li>MinGW 是在编译时提供 Linux 到 Win 代码的转换，用到的其实是 Windows 运行库</li>
</ul>
<ol>
<li>
<p>在 <a href="https://www.cygwin.com/" target="_blank" rel="noopener">Cygwin</a> 下载安装文件 setup-x86_64.exe；</p>
</li>
<li>
<p>运行安装文件，一路 next，选择站点界面新增 <code>http://mirrors.163.com/cygwin/</code>；</p>
</li>
<li>
<p>Select Packages 界面，在 View 中选择 Full，然后分别输入 <code>cmake</code> <code>gcc-core</code> <code>gcc-g++</code> <code>gdb</code> <code>make</code>，选择对应的版本号，然后 next 批量安装；</p>
</li>
<li>
<p>安装过程中发现卡在了 <code>/etc/postinstall/0p_000_autorebash.dash</code>，查看了 <a href="http://cygwin.1069669.n5.nabble.com/Autorebase-hangs-on-install-td128035.html#a128036" target="_blank" rel="noopener">解决方法</a>，将 dash 进程结束掉，最后成功安装；</p>
</li>
<li>
<p>在系统环境变量中添加 <code>C:\cygwin64\bin</code>；</p>
</li>
<li>
<p>CLion-&gt;Setting-&gt;Build Execution Deployment-&gt;Toolchain 中将 Environment 选为 Cygwin，目录为 Cygwin 安装文件夹，Cmake Debugger 均在 <code>C:\cygwin64\bin</code> 目录下选择，Make、C Complier、C++ Complier 这三项留给 CLion 自动检测。</p>
</li>
<li>
<p>点击向上的箭头，把 Cygwin 设置为 Default，Cmake 会重新 Config 项目代码：</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">C:\SOFTWARE\cygwin64\bin\cmake.exe -DCMAKE_BUILD_TYPE=Debug -G <span class="string">"CodeBlocks - Unix Makefiles"</span> /cygdrive/d/LinuxShare/Tripod-cxx</span><br><span class="line">-- The C compiler identification is GNU <span class="number">9.2</span><span class="number">.0</span></span><br><span class="line">-- The CXX compiler identification is GNU <span class="number">9.2</span><span class="number">.0</span></span><br><span class="line">-- Check <span class="keyword">for</span> working C compiler: /usr/bin/cc</span><br><span class="line">-- Check <span class="keyword">for</span> working C compiler: /usr/bin/cc -- works</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Check <span class="keyword">for</span> working CXX compiler: /usr/bin/c++.exe</span><br><span class="line">-- Check <span class="keyword">for</span> working CXX compiler: /usr/bin/c++.exe -- works</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Configuring done</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>CLion</tag>
        <tag>Cygwin</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Quiz 题解 201~300</title>
    <url>/posts/7651320d/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>C++ Quiz 题解 101~200 整理</li>
<li>有趣的题目：</li>
<li>217 225 226 227 233 249 264 273 284</li>
</ul>
</blockquote>
<a id="more"></a>
<h4 id="Q-205">Q 205</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> id = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="built_in">array</span>[] = &#123; id % <span class="number">3</span>, id % <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(<span class="built_in">array</span>[<span class="number">0</span>]) &lt;&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(<span class="built_in">array</span>[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：10<br>
array 是一个 <code>char</code> 类型的数组，但是却使用 unsigned int 初始化，unsigned int 转换为 <code>char</code> 属于 narrow 转换，即新类型并不能完整地表示原类型。<br>
但是代码中的源是一个常量表达式，它类型提升后的值是能够适合目标类型的。</p>
<h4 id="Q-217">Q 217</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span>&amp; a = i &gt; <span class="number">0</span> ? i : <span class="number">1</span>;</span><br><span class="line">    i = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：21<br>
本题的关键在于 a 是否是 i 的引用。<br>
条件表达式的类型和值类别都取决于第二和第三个表达式的类型和值类别，如果两者都是左值，结果会是左值，但是此时 i 和 1 分别是左值与右值。<br>
按照 <a href="https://timsong-cpp.github.io/cppwp/n4659/expr.cond" target="_blank" rel="noopener">expr.cond 8.16.6</a> 能够得出表达式 i &gt; 0 ? i : 1 的结果是一个纯右值，也就是临时量，因此 a 绑定的是一个临时变量，对 i 的修改不会影响到 a 的值。</p>
<h4 id="Q-219">Q 219</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Args&gt;</span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T arg, Args... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg + sum&lt;T&gt;(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> n1 = sum(<span class="number">0.5</span>, <span class="number">1</span>, <span class="number">0.5</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">auto</span> n2 = sum(<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n1 &lt;&lt; n2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：32<br>
<code>T sum(T arg, Args... args)</code> 是一个迭代类型的函数模板，它会一直调用自身一直到 base case <code>T sum(T arg)</code>，当 T 的类型没有被指定时，它会被推导为 <code>sum</code> 的第一个参数，那么当 <code>sum</code> 迭代的时候，T 已经指定了相关类型，对于 n1 来说是 <code>double</code>，对于 n2 来说是 <code>int</code>。</p>
<h4 id="Q-220">Q 220</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'f'</span>; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'g'</span>; <span class="keyword">return</span> <span class="string">'g'</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">h</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'h'</span>; <span class="keyword">return</span> <span class="string">'h'</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> result = f() ? g() : h();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：ffh<br>
三元运算符的基本操作</p>
<h4 id="Q-222">Q 222</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;variant&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    variant&lt;<span class="keyword">int</span>, <span class="keyword">double</span>, <span class="keyword">char</span>&gt; v;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.index();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：0<br>
<code>variant</code> 是类型安全的 <code>union</code>，它可以在任意时间保存模板参数列表中某一类型的值或者空值，<code>variant</code> 不能存放引用、数组或 <code>void</code>，空 <code>variant</code> 应该写为 <code>std::variant&lt;std::monostate&gt;</code>。<br>
与 <code>union</code> 一样，<code>variant</code> 默认初始化为它模板类型列表中的第一个值，除非该项无法默认构造。<br>
<code>variant.index()</code> 返回当前保有项的下标，如果 <code>variant</code> 无值则返回 <code>variant_npos</code>。</p>
<h4 id="Q-224">Q 224</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Base::f</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Derived</span> :</span> Base &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Derived::f</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Derived object;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; object.f();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ((Base&amp;)object).f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：22<br>
首先，为纯虚函数提供定义是有效的，只要它不是在类的声明中实现即可。<br>
<code>((Base&amp;)object).f()</code> 在调用 f 之前将对象强制转换为 <code>Base&amp;</code>，但是由于 f 为虚函数，因此仍然输出 2。</p>
<h4 id="Q-225">Q 225</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">    X() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span>; &#125;</span><br><span class="line">    X(<span class="keyword">const</span> X &amp;) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"3"</span>; &#125;</span><br><span class="line">    ~X() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"4"</span>; &#125;</span><br><span class="line"></span><br><span class="line">&#125; object;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    X(object);</span><br><span class="line">    object.f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：11422<br>
首先，<code>struct X {...} object;</code> 定义了一个 X 类型的 object，调用 1 次构造函数；<br>
<code>X(object)</code> 是一个新变量 object 的声明，而不是复制构造一个 X 对象，如果写成 <code>X object</code> 就很清楚了，局部变量覆盖掉了全局变量，调用 1 次构造函数；<br>
最后别忘了调用两次析构函数。</p>
<h4 id="Q-226">Q 226</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">    X() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span>; &#125;</span><br><span class="line">    X(X &amp;) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span>; &#125;</span><br><span class="line">    X(<span class="keyword">const</span> X &amp;) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"3"</span>; &#125;</span><br><span class="line">    X(X &amp;&amp;) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"4"</span>; &#125;</span><br><span class="line">    ~X() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"5"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Y</span> &#123;</span></span><br><span class="line">    <span class="keyword">mutable</span> X x;</span><br><span class="line">    Y() = <span class="keyword">default</span>;</span><br><span class="line">    Y(<span class="keyword">const</span> Y &amp;) = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Y y1;</span><br><span class="line">    Y y2 = <span class="built_in">std</span>::<span class="built_in">move</span>(y1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1255<br>
首先构造一个 Y 对象，Y 中有一个 X 类型的成员类，使用默认构造，输出 1。<br>
<code>std::move</code> 会将 y1 转变为右值，但是 Y 并没有移动构造函数，因此调用的是它的拷贝构造函数，这个隐式定义的拷贝构造函数将会执行 X 类成员对象的拷贝，现在的问题是到底会执行哪个拷贝构造函数。<br>
因为 X 有 <code>mutable</code> 修饰，因此 X 被认为是非 <code>const</code> 成员，重载解析认为 <code>X(X &amp;)</code> 更加合适，因为 <code>X(const X &amp;)</code> 还需要进行常数转换，所以此时输出 2。<br>
最后，因为调用的是拷贝构造函数，会输出两个 5，即析构两次。</p>
<h4 id="Q-227">Q 227</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Func = <span class="keyword">int</span>();</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">    Func f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">S::f</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    S s;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s.f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1<br>
<code>using Func = int()</code> 是一种<strong>别名声明</strong>，这种声明方式既可以用于普通函数，也可以用于成员函数。</p>
<h4 id="Q-229">Q 229</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> f = [](<span class="keyword">int</span> b) &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; f(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：5<br>
lambda 表达式的隐式捕获规则是它不会显示捕获 *this 和具有自动存储周期的变量，而此处的 a 具有静态存储周期，因此 lambda 不会隐式捕获 a。这里的 a 仅仅代表全局变量的引用。</p>
<h4 id="Q-230">Q 230</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> var1 : <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> var2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    X x;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (&amp;x.var1 &lt; &amp;x.var2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：编译错误<br>
取地址运算符 <code>&amp;</code> 不能用于位域</p>
<h4 id="Q-231">Q 231</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">override</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">override</span> <span class="title">f</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Derived</span> :</span> Base &#123;</span><br><span class="line">    virtual auto f() -&gt; override override&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">override</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Derived().f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1<br>
这道题的考点在于 <code>override</code> 能否用作类型名称。<br>
C++ 标准中的保留关键字不包含 <code>override</code>，只有出现在特定的上下文中时，<code>override</code> 和 <code>final</code> 才具有特殊意义，而 <code>override</code> 只有出现在声明符之后才具有特殊意义，如果我们用 type 替换类型名，<code>Drived::f</code> 可以写为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">virtual auto f() -&gt; type override&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span>;</span><br><span class="line">    <span class="keyword">return</span> type();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Q-233">Q 233</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">const</span>&amp;&amp;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> ptr = &amp;X::f;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; is_same_v&lt;<span class="keyword">decltype</span>(ptr), <span class="keyword">int</span>()&gt;</span><br><span class="line">         &lt;&lt; is_same_v&lt;<span class="keyword">decltype</span>(ptr), <span class="keyword">int</span>(X::*)()&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：00<br>
返回类型，参数类型，引用标识符，const &amp; volatile 标识符以及异常规范（不包括缺省参数）是函数类型的一部分。<br>
这说明代码中的 <code>ptr</code> 类型应该是 <code>int(X::f)() const&amp;&amp;</code>。</p>
<h4 id="Q-236">Q 236</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">auto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = Foo();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：A1<br>
转换函数能够有推断返回类型（只有转换函数模板不能这么做）。</p>
<h4 id="Q-248">Q 248</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp;<span class="built_in">max</span> = <span class="built_in">std</span>::<span class="built_in">max</span>(x, y);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp;<span class="built_in">min</span> = <span class="built_in">std</span>::<span class="built_in">min</span>(x, y);</span><br><span class="line"></span><br><span class="line">    x = <span class="number">11</span>;</span><br><span class="line">    y = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">max</span> &lt;&lt; <span class="built_in">min</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1111<br>
<code>std::max</code> 与 <code>std::min</code> 当两数相等时返回第一个数。</p>
<h4 id="Q-249">Q 249</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">const</span> &amp;b = a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：00<br>
对于 <code>T1&amp; cv1 = (T2)cv2</code> 来说，<strong>只有当 T1 与 T2 两个类型相同或者有继承关系，它们才是引用相关的，否则就是引用无关的</strong>。<br>
当 ·T1 与 T2 引用无关时，初始化的引用表达式会将 cv2 隐式转换出一个临时的 T1 类型的对象用于引用绑定，该对象与原对象没有关系。<br>
<code>'0'</code> 是 <code>char</code> 类型的字面量，ASCII 码为 48，a 中保存的为 <code>int</code> 类型的 48，但是 b 是 <code>char const</code> 类型的引用，因此 <code>char const</code> 与 <code>int</code> 不存在引用相关的关系，b 绑定的是一个 a 转换出来的临时 <code>char const</code> 类型对象，因此两次打印都为 0。</p>
<h4 id="Q-250">Q 250</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(T...)</span> </span>&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'A'</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(T...)</span> </span>&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'B'</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    foo(<span class="number">1</span>);</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：AB<br>
第一个 <code>foo</code> 函数是老式的可变参数函数模板，接收类型为 T 的第一个参数，接着是可变数目的参数。<br>
第二个 <code>foo</code> 是可变参函数模板，它需要接收一个参数包。<br>
重载函数的时候，我们首先要找到对于给定的函数调用，哪些函数是可用的，然后再这些可用的函数中找到最合适的，对于函数模板来说，我们首先对模板参数进行推导来生成这些候选的特化函数。<br>
先看调用 <code>foo(1)</code>：<br>
对于第一个函数模板 <code>foo</code> 来说，T 被推导为 <code>int</code>，重载解析中参数列表 … 会被忽略，因为它没有匹配参数，最后得到 <code>foo(int)</code>。对于第二个函数模板 <code>foo</code> 来说，也会推断出 <code>foo(int)</code>，所以这两种都是可行的，我们必须找到一个更合适的。<br>
C++ 规范<strong>首先会比较哪一个模板的转换序列更佳</strong>，但是在这里两个模板的转换序列是一样的；<br>
<strong>接着比较哪一个模板更加特化</strong> - <em>more specialized</em> - 我们能够从 <code>foo2</code> 中推导出 <code>foo1</code> 却无法从 <code>foo1</code> 中推导出 <code>foo2</code>，因此对于 <code>foo(1)</code> 来说，第一个模板更合适。<br>
再看 <code>foo(1,2)</code>，第一个函数模板 <code>foo</code> 需要省略 <code>...</code> 来匹配转换序列，而第二个函数模板 <code>foo</code> 则不需要省略，从比较模板转换序列的角度来说，第二个 <code>foo</code> 更合适。</p>
<h4 id="Q-252">Q 252</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="string">'3'</span> - <span class="string">'2'</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1<br>
C++ 标准中，只能保证十进制数字之间的间隔相差 1，不能保证 <code>'b' - 'a' = 1</code>。</p>
<h4 id="Q-259">Q 259</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span>)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"u"</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span>          </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"i"</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span>)</span>         </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c"</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> y = <span class="number">2</span>;</span><br><span class="line">    f(x + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：程序输出未定<br>
两个 <code>char</code> 类型的和并不是唯一确定的，虽然能肯定结果不是 <code>char</code>。<br>
在运算之前操作数会进行通用类型转换，而 <code>char</code> 在不同的场合可能会被提升为 <code>int</code> 或 <code>unsigned int</code>。</p>
<h4 id="Q-264">Q 264</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span> &#123;</span></span><br><span class="line">    C() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> C c;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; c.i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：编译错误<br>
由于 c 是 const 并且有默认构造函数，是不能默认初始化 c 的。<br>
C++ 标准规定，如果程序调用 <code>const</code> 限定类型 T 对象的默认初始化，那么 T 应该是 - <em>const-default-constructible</em> - 常量默认可构造的，常量默认可构造指的是<strong>类类型 T 的默认初始化调用了用户提供的 T 的构造函数</strong>或者<strong>每个直接的非变量非静态数据成员有默认成员初始化</strong>，如果要将本题修改正确有两种方法：<br>
给 <code>int i</code> 一个初始值 <code>int i{0}</code>；<br>
为 C 提供构造函数，移除 <code>= default</code>，执行 <code>C::C() = default</code>。</p>
<h4 id="Q-265">Q 265</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span>*&amp;&amp;)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span>*&amp;)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">    f(&amp;c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1<br>
<code>&amp;c</code> 返回的是左值 c 的地址，这个地址是右值，因为它是一个 <code>operator&amp;</code> 返回的匿名临时对象。</p>
<h4 id="Q-273">Q 273</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span>; &#125;</span><br><span class="line">    ~A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"main"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">sizeof</span> <span class="keyword">new</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：main<br>
<code>sizeof</code> 运算符的操作数可以是一个表达式，也可以是一个带圆括号的 type-id。<br>
本题中 <code>sizeof</code> 的操作数是表达式 <code>new A</code>，它的类型是指向 A 对象的指针，指针的大小在每个平台是不同的，但是这里我们并不关系，因为无需打印它，问题是 <code>new A</code> 是否构造了一个新的 A 对象，我们是否需要析构它。<br>
C++ 标准规定，<code>sizeof</code> 的操作数如果是表达式，它会是一个未求值的操作数 - an unevaluated operand，因此表达式 <code>new A</code> 不会被求值，A 并不会被构造，表达式仅仅用于计算 <code>sizeof</code>。</p>
<h4 id="Q-283">Q 283</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show_id</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~show_id() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; id; &#125;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] <span class="keyword">new</span> show_id[<span class="number">3</span>]&#123; &#123;<span class="number">0</span>&#125;, &#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>&#125; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：210<br>
这道题的核心在于对象析构的顺序是怎样的，C++ 中，对象通常按照它们构造的相反顺序析构，包括 <code>delete[]</code> 运算。</p>
<h4 id="Q-284">Q 284</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">auto main() -&gt; int &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> out&#123;<span class="string">"Hello world"</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (out[out.<span class="built_in">size</span>()] == <span class="string">'\0'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1<br>
当 pos 与字符串长度相等时，std::string 的 operator[size_type pos] 操作符必须返回一个空字符。</p>
<h4 id="Q-286">Q 286</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> short x=<span class="number">0xFFFF</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> short y=<span class="number">0xFFFF</span>;</span><br><span class="line">    <span class="keyword">auto</span> z=x*y;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (z &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：程序行为未定义<br>
x 和 y 在运算之前都会被转换成另外一种类型，在大多数系统上这个类型为 <code>int</code>，即 32 位有符号。<br>
但 0xFFFF * 0xFFFF 的乘积为 4294836225 已经超过了 int 能表示的最大值 2147483647，有符号整数溢出，属于未定义行为。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Programming-Language</tag>
        <tag>C++ Quiz</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Quiz 题解 101~200</title>
    <url>/posts/467b42a7/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>C++ Quiz 题解 101~200 整理</li>
<li>有趣的题目：</li>
<li>105 111 116 122 129 130 133 135 148 163</li>
<li>190 193 198</li>
</ul>
</blockquote>
<a id="more"></a>
<h4 id="Q-105">Q 105</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"a"</span>; &#125;</span><br><span class="line">    ~A() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">label:</span><br><span class="line">    A a;</span><br><span class="line">    <span class="keyword">if</span> (i--)</span><br><span class="line">        <span class="keyword">goto</span> label;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：aAaA<br>
C++ 标准对于 <code>goto</code> 语句有如下要求：<br>
具有自动存储期的变量会在跳转之前被销毁而不是在跳转之后被销毁。</p>
<h4 id="Q-106">Q 106</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123; <span class="keyword">int</span> y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; y;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：程序链接错误，行为未定义<br>
C++ 为了支持函数重载，其中的函数在被 C++ 编译后在符号库中的名字与 C 语言的不同。为了实现 C++ 与 C 的混合编程，C++ 引入了 <code>extern &quot;C&quot;</code>，被 <code>extern &quot;C&quot;</code> 修饰的函数或者变量是按照C语言方式编译和链接的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;       <span class="comment">//声明一个全局变量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a = <span class="number">0</span>;   <span class="comment">//定义全局变量并给初值</span></span><br></pre></td></tr></table></figure>
<p>原代码中的<code>extern &quot;C&quot; int x;</code> 表示被它修饰的目标是 extern 的；其次，被它修饰的目标代码是 “C” 的。所以说这条语句表示的是<strong>声明一个 C 类型的变量</strong>。<br>
而<code>extern &quot;C&quot; { int y; }</code> 表示则的是定义一个 C 类型的变量。</p>
<h4 id="Q-107">Q 107</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"f"</span>; <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"g"</span>; <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">h</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    h(&#123;f(), g()&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：fg<br>
这道题的考点是初始化列表中参数的计算顺序，C++ 标准规定，初始化列表中的子句按照它们出现的顺序进行计算。</p>
<h4 id="Q-109">Q 109</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_with</span><span class="params">(<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(T)&gt; f, T val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="built_in">print</span> = [] (<span class="keyword">int</span> x) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x; &#125;;</span><br><span class="line">    call_with(<span class="built_in">print</span>, <span class="number">42</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：编译错误<br>
编译器会推导每个参数的 <code>T</code> 并检查推导类型是否匹配。<br>
<code>lambda</code> 是完全不同的类型，不能与 <code>std::function&lt;void(T)</code>&gt; 匹配，这种情况需要将第一个参数转换为非推导上下文 - <em>nondeduced context</em> - 来解决。<br>
非推导上下文是一种类型的嵌套名称说明符。<br>
举几个例子：<br>
类型 <code>A&lt;T&gt;::B&lt;T2&gt;</code> 中 <code>T</code> 与 <code>T2</code> 都是非推导的；<br>
<code>void f(typename A&lt;T&gt;::B, A&lt;T&gt;)</code> 中的第一个 <code>T</code> 是非推导的，第二个 <code>T</code> 是推导的。<br>
使用一个 helper struct 辅助结构模板可以将 <code>std::function&lt;void(T)&gt;</code> 转换为非推导上下文：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">type_identity</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_with</span><span class="params">(<span class="keyword">typename</span> type_identity&lt;<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(T)&gt;&gt;::type f, T val)</span> </span>&#123;</span><br><span class="line">    f(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除此之外，还可以像下面这样明确指定模板参数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">call_with&lt;<span class="keyword">int</span>&gt;(<span class="built_in">print</span>, <span class="number">42</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Q-111">Q 111</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">3</span>) <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1<br>
<code>continue</code> 语句会将控制传递给最小封闭迭代语句的循环延续部分，换句话说，就是<strong>循环的末尾而不是起始</strong>。</p>
<h4 id="Q-112">Q 112</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span>; &#125;</span><br><span class="line">    A(<span class="keyword">const</span> A&amp;) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span>; &#125;</span><br><span class="line">    A(A&amp;&amp;) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"3"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> &#123;</span></span><br><span class="line">    A a;</span><br><span class="line">    B() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"4"</span>; &#125;</span><br><span class="line">    B(<span class="keyword">const</span> B&amp; b) : a(b.a) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"5"</span>; &#125;</span><br><span class="line">    B(B&amp;&amp; b) : a(b.a) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"6"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B b1;</span><br><span class="line">    B b2 = <span class="built_in">std</span>::<span class="built_in">move</span>(b1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1426<br>
b1 默认构造成功之前 a 先默认构造，因此输出 14.<br>
接着用移动构造函数初始化 b2，<code>std::move(b1)</code> 将 b1 的引用转化为一个将亡值，在 B 的移动构造函数中，a 在初始化列表中被构造，尽管此处的 b 是一个绑定了右值的右值引用，b 本身仍然是一个左值，因此调用的是 A 的拷贝构造函数，最后输出 26。</p>
<h4 id="Q-114">Q 114</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span>       </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;C&gt; v;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;C&gt; u;</span><br><span class="line">    C *<span class="keyword">const</span> p;</span><br><span class="line">    S() : v(<span class="number">1</span>), u(<span class="keyword">new</span> C()), p(u.<span class="built_in">get</span>()) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    S s;</span><br><span class="line">    <span class="keyword">const</span> S &amp;r = s;</span><br><span class="line"></span><br><span class="line">    s.v[<span class="number">0</span>].foo();</span><br><span class="line">    s.u-&gt;foo();</span><br><span class="line">    s.p-&gt;foo();</span><br><span class="line"></span><br><span class="line">    r.v[<span class="number">0</span>].foo();</span><br><span class="line">    r.u-&gt;foo();</span><br><span class="line">    r.p-&gt;foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：AAABAA<br>
C++ 标准规定，cv 限定符应用于指针而不是指向的对象。<br>
因此对于原始指针和引用，包括试图模拟它们的标准类型 <code>std::unique_ptr</code> 来说，<code>const</code> 限定符属于浅限定，而对于标准容器来说，<code>const</code> 则不是浅限定。<br>
上面的代码中对象 s 是 non-const 的，因此该对象的成员都保留了它的默认常量属性，即 non-const，并且所有对该对象成员的调用都使用 <code>C::foo()</code> 的 non-const 版本。<br>
然而，r 是对象 s 的常量引用，const 限定符改变了它的成员 v 的行为，此时 <code>std::vector</code> 的 <code>operator[]</code> 返回的是 <code>const C&amp;</code>，因此调用的是 <code>C::foo()</code> 的 const 版本，同时 r 的 const 属性也传递给它的成员 u 和 p，也就是说指针本身变成了常量，但指向的对象并不是常量，因此它们仍然调用 <code>C::foo()</code> 的 non-const 版本。<br>
最后，还要注意 <code>C* const p</code> 是一个指向非常量对象的常量指针。</p>
<h4 id="Q-115">Q 115</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"i"</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span>)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d"</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span>)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"f"</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f(<span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：d<br>
浮点数字面量的类型为 <code>double</code>，除非明确地用后缀指定。</p>
<h4 id="Q-116">Q 116</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">y</span><span class="params">(<span class="keyword">int</span> &amp;)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">y</span><span class="params">(<span class="keyword">int</span> &amp;&amp;)</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">int</span> <span class="title">f</span>(<span class="title">T</span> &amp;&amp;<span class="title">x</span>) &#123;</span> <span class="keyword">return</span> y(x); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">int</span> <span class="title">g</span>(<span class="title">T</span> &amp;&amp;<span class="title">x</span>) &#123;</span> <span class="keyword">return</span> y(<span class="built_in">std</span>::<span class="built_in">move</span>(x)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">int</span> <span class="title">h</span>(<span class="title">T</span> &amp;&amp;<span class="title">x</span>) &#123;</span> <span class="keyword">return</span> y(<span class="built_in">std</span>::forward&lt;T&gt;(x)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; f(i) &lt;&lt; f(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; g(i) &lt;&lt; g(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; h(i) &lt;&lt; h(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：112212<br>
<strong>模板化函数中的 T&amp;&amp; 不一定表示右值引用，如果用左值实例化，它会坍缩成左值引用，如果用右值实例化，则会坍缩成右值引用</strong>。<br>
这三个函数分别使用左值和右值调用了一次，三种情况下都会分别坍缩成左值和右值引用，但是<strong>在函数内部，x 本身就是左值，不管它的类型是左值引用还是右值引用</strong>。</p>
<h4 id="Q-118">Q 118</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> <span class="keyword">const</span> *str)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; str; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(short num)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; num; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"abc"</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'A'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：编译错误，<code>print(0)</code> 重载函数调用不明确<br>
空指针常量既可以是一个值为 0 的整型字面量，也可以是 std::nullptr_t 类型的右值。<br>
因此 0 既可以隐式转化为任何指针类型，也可以隐式转化为 short 类型。</p>
<h4 id="Q-119">Q 119</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> * p = &amp;p;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">bool</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1<br>
p 中保存的是它自己的地址。</p>
<h4 id="Q-120">Q 120</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    x = a, b;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：10<br>
逗号运算符的优先级在 C++ 中是最低的。</p>
<h4 id="Q-122">Q 122</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">unsigned</span> ll)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    foo(<span class="number">2u</span>ll);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：2<br>
默认情况下 <code>signed</code> <code>unsigned</code> <code>long</code> <code>short</code> 都暗指 <code>int</code>，因此在这些符号类型之后出现的类型名称均被视为声明的名称。<br>
因此 <code>void foo(unsigned ll)</code> 被编译器认为是需要一个 <code>unsigned(int)</code> 类型的变量，名称为 <code>ll</code>。</p>
<h4 id="Q-125">Q 125</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">f</span>(<span class="title">T</span>) &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ++i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f(<span class="number">1</span>);</span><br><span class="line">    f(<span class="number">1.0</span>);</span><br><span class="line">    f(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：112<br>
每个实例化后的函数模板都有它自己的一份静态变量的拷贝。<br>
本题中我们有两个 f 的实例化，一个 T = int，另一个 T = double，f(double) 中的静态变量 i 与 f(int) 中的静态变量 i 不是同一个 i。</p>
<h4 id="Q-126">Q 126</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foobar</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> foobar::x = foo();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; foobar::x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：11<br>
在类的静态成员定义中使用的名称和类中成员函数的名称是一致的，换句话说，尽管 <code>foo()</code> 调用发生在类外，但是它位于静态数据成员的定义中，可以看作 <code>foo()</code> 是 <code>footbar</code> 的成员函数调用，而不是全局 <code>foo()</code> 的调用。</p>
<h4 id="Q-129">Q 129</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; delimiters = &#123; <span class="string">","</span>, <span class="string">";"</span> &#125;;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; delimiters[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：程序行为未定义<br>
这道题用两个字符串字面量来初始化 <code>vector&lt;char&gt;</code>，模板类 <code>template &lt;class T&gt; vector</code> 的初始化列表的构造函数为 <code>vector(initializer_list&lt;T&gt;)</code> ，本题中为 <code>vector(initializer_list&lt;char&gt;)</code>，而字符串字面量的类型为 - <em>array of n const char</em> - 常量字符数组，并不匹配。<br>
但是这题为什么没有出现编译错误，是因为编译器找到了另一个匹配的构造函数。<br>
C++ 标准规定，当类型为 T 的类对象采用列表初始化的时候，重载解析会有两个选择构造函数的阶段：<br>
首先，候选函数是类 T 的初始化列表构造函数，参数列表只有一个参数，即初始化列表；<br>
如果没有找到合适的构造函数，重载解析会从类 T 的所有构造函数中寻找候选函数，参数列表由初始化列表中的元素组成；<br>
对于本题来说，<code>template &lt;class InputIterator&gt; vector(InputIterator first, InputIterator last)</code> 恰好满足第二种情况，构造函数认为它传入了两个正确的迭代器类型，但是其实这两个迭代器分别属于两个不同的序列，因此这个程序行为是未定义的。</p>
<h4 id="Q-130">Q 130</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adl</span><span class="params">(T)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"T"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_adl</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    adl(S());</span><br><span class="line">    adl(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adl</span><span class="params">(S)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"S"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    call_adl(S());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：TS<br>
当查找模板定义中使用的名称的声明时，对于非依赖模板参数的名称查找使用的是通常的查找规则，而依赖模板参数的名称查找会延迟到实际模板参数已知时。<br>
adl(s()) 属于非依赖调用，因此在定义函数模板的时候就进行了名称查找；<br>
adl(t) 属于依赖调用，该调用的解析推迟到模板实例化之后；<br>
当在定义函数模板时查找 adl 时，存在的 adl 的唯一版本就是 adl(t)，此时 adl(S) 还不存在，因此只会调用 adl(T)。</p>
<h4 id="Q-131">Q 131</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"i"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    C(<span class="keyword">double</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">C <span class="title">c1</span><span class="params">(<span class="number">7</span>)</span></span>;</span><br><span class="line">    C c2 = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：id<br>
由于 explicit 关键字的存在，<code>C c2 = 7</code> 中是不会调用隐式转化构造函数的，在第二种情况下整型字面量会被转化为 <code>double</code> 类型构造函数。</p>
<h4 id="Q-132">Q 132</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> i = foo())</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    bar();</span><br><span class="line">    bar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：11<br>
<code>foo()</code> 被调用了两次</p>
<h4 id="Q-133">Q 133</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span>; &#125;</span><br><span class="line">    A(<span class="keyword">const</span> A &amp;) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"a"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> <span class="keyword">virtual</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"B"</span>; &#125;</span><br><span class="line">    B(<span class="keyword">const</span> B &amp;) &#123; <span class="built_in">cout</span>&lt;&lt; <span class="string">"b"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span> <span class="keyword">public</span> <span class="keyword">virtual</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C() &#123; <span class="built_in">cout</span>&lt;&lt; <span class="string">"C"</span>; &#125;</span><br><span class="line">    C(<span class="keyword">const</span> C &amp;) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"c"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span>B,C &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    D() &#123; <span class="built_in">cout</span>&lt;&lt; <span class="string">"D"</span>; &#125;</span><br><span class="line">    D(<span class="keyword">const</span> D &amp;) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"d"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d1;</span><br><span class="line">    <span class="function">D <span class="title">d2</span><span class="params">(d1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：ABCDABCd<br>
构造 d1 的时候，派生类是按照基类说明列表中的顺序来构造的，因此输出 ABCD；<br>
对于 d2 来说，一个隐式定义的拷贝/移动构造函数是会调用它基类的拷贝/移动构造函数的，但是如果提供了一个用户自定义的拷贝构造函数，就必须要手动设置调用基类的拷贝/移动构造函数。</p>
<h4 id="Q-135">Q 135</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">bool</span>,<span class="keyword">int</span>&gt; mb = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mb.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mi = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mi.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：13<br>
<code>map</code> 中的 <code>key</code> 是唯一的，而 mb 中的三个 <code>key</code> 都是 <code>true</code>，因此 size 为 1。</p>
<h4 id="Q-140">Q 140</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">get_size_1</span><span class="params">(<span class="keyword">int</span>* arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">sizeof</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">get_size_2</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">sizeof</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">get_size_3</span><span class="params">(<span class="keyword">int</span> (&amp;arr)[<span class="number">10</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">sizeof</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//Assume sizeof(int*) != sizeof(int[10])</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">sizeof</span>(<span class="built_in">array</span>) == get_size_1(<span class="built_in">array</span>));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">sizeof</span>(<span class="built_in">array</span>) == get_size_2(<span class="built_in">array</span>));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">sizeof</span>(<span class="built_in">array</span>) == get_size_3(<span class="built_in">array</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：001<br>
首先，<code>sizeof(array)</code> 返回的是数组 array 的大小。<br>
在 <code>get_size_3</code> 函数中，参数是一个大小为 10 的 <code>int</code> 类型数组的引用，C++ 标准规定，对一个引用类型使用 <code>sizeof</code> 运算符，结果是被引用类型的大小，因此 <code>get_size_3</code> 返回 10。<br>
而 <code>get_size_1</code> <code>get_size_2</code> 的参数均为指针，其中 <code>get_size_2</code> 的参数会从数组退化成指针，<code>sizeof</code> 运算符返回指针变量的大小。</p>
<h4 id="Q-144">Q 144</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">int</span>&gt;::digits==<span class="number">63</span> &amp;&amp;</span><br><span class="line">    <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">int</span>&gt;::digits==<span class="number">31</span> &amp;&amp;</span><br><span class="line">    <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;::digits==<span class="number">32</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">int</span> i = <span class="number">-0xffffffff</span>; i ; --i) &#123;</span><br><span class="line">            N[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;  </span><br><span class="line">        N[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; N[<span class="number">0</span>] &lt;&lt; N[<span class="number">1</span>] &lt;&lt; N[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：010<br>
无符号量的负值是从 2 ^ n 减去它的值计算出来的，其中 n 是提升操作数中的位数。<br>
本题中 n 为 32，因此 i = 1。</p>
<h4 id="Q-145">Q 145</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></span><br><span class="line">    E() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span>; &#125;</span><br><span class="line">    E(<span class="keyword">const</span> E&amp;) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span>; &#125;</span><br><span class="line">    ~E() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"3"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> E();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：13<br>
这道题的关键在于 E() 到底是什么。<br>
C++ 标准规定，纯右值是一个表达式，该表达式的值用于初始化一个对象、位域或者计算运算符的操作值。<br>
return 语句通过拷贝构造函数将函数调用对象初始化为全局左值或纯右值。<br>
E() 只是一个纯右值。</p>
<h4 id="Q-147">Q 147</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>; <span class="comment">//What is wrong here??/</span></span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1<br>
<code>??/</code> 在 C++17 中已经被 <code>\</code> 取代了，具体可以参考 <a href="https://stackoverflow.com/questions/1234582/purpose-of-trigraph-sequences-in-c" target="_blank" rel="noopener">C++ Trigraph</a></p>
<h4 id="Q-148">Q 148</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (a + a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：程序行为未定义<br>
这里的问题不是缺少变量 a 的初始化 - 这里会隐式初始化为 0，而是两次访问变量 a 的顺序没有排序。<br>
C++ 标准规定，访问 volatile 类型的 glvalue（左值或将亡值）会产生副作用，针对同一片内存区域的无序访问属于未定义行为。</p>
<h4 id="Q-151">Q 151</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::is_signed&lt;<span class="keyword">char</span>&gt;::value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：程序输出未指定<br>
char 对象能否保存负值完全是由实现决定的。</p>
<h4 id="Q-153">Q 153</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* str = <span class="string">"X"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：编译错误<br>
字符串字面量的类型为 <code>const</code> 字符数组，虽然大多数编译器允许 <code>char const []</code> 类型转换为 <code>char*</code>，但是 C++11 开始这是不合法的操作。</p>
<h4 id="Q-157">Q 157</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; (&amp;<span class="keyword">typeid</span>(A) == &amp;<span class="keyword">typeid</span>(A));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：输出不确定<br>
<code>typeid</code> 表达式的返回值是一个静态类型 <code>const std::type_info</code> 的左值，因此我们比较的是两个指向 <code>const std::type_info</code> 的指针，C++ 标准中并不保证所有针对相同类型的 <code>typeid</code> 表达式的计算都会引用同一个 <code>std::type_info</code> 类型的实例，因此此处答案是不确定的。</p>
<h4 id="Q-158">Q 158</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">    Foo() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"a"</span>; &#125;</span><br><span class="line">    Foo(<span class="keyword">const</span> Foo&amp;) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"b"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Foo&gt; <span class="title">bar</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：aaaaa<br>
从 C++11 开始，<code>std::vector</code> 具有只有一个参数的构造函数：<code>explicit vector(size_type n, const Allocator&amp; = Allocator())</code>，用于创建一个<strong>具有 n 个已经值初始化了的元素</strong>的 vector，每一个值初始化的元素都需要调用默认构造函数。</p>
<h4 id="Q-159">Q 159</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    i = <span class="number">3</span>;</span><br><span class="line">    f(i++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：34<br>
C++ 标准规定，在调用函数时，进入函数之前，对函数所有参数的计算都已经结束，因此进入函数 <code>f(i++)</code> 之前 i 已经自增完成，所以函数中的 i 值为 4。</p>
<h4 id="Q-161">Q 161</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (n % <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                ++i;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">while</span> (--n &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：5<br>
C++ 标准规定，<code>switch</code> 语句后可以跟随任何有效语句，包括复合语句，<code>do-while</code> 的执行不会被 <code>case</code> 标签所改变。</p>
<h4 id="Q-162">Q 162</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">D</span> :</span> B&lt;T&gt;&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;</span><br><span class="line">        f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    D&lt;<span class="keyword">int</span>&gt; d;</span><br><span class="line">    d.g();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1<br>
根据 C++ 标准，在类或类模板的定义中，如果基类依赖于模板参数，则在类模板的定义处以及类模板的实例化过程中不会检查基类的范围。因此当编译器看到 <code>g()</code> 调用 <code>f()</code> 的时候，应该从全局作用域中选择一个。</p>
<h4 id="Q-163">Q 163</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> foo = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span>&amp; <span class="title">getFoo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> foo; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printFoo</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; foo; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> bar = a.getFoo();</span><br><span class="line">    ++bar;</span><br><span class="line"></span><br><span class="line">    a.printFoo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：0<br>
对于函数模板来说，每个已声明变量的类型都是由占位符类型推导决定的。<br>
下面两种写法是一致：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Method 1</span></span><br><span class="line"><span class="keyword">auto</span> bar = a.getFoo();</span><br><span class="line"><span class="comment">// Method 2</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">f</span><span class="params">(T t)</span></span>;</span><br><span class="line">f(a.getFoo());</span><br></pre></td></tr></table></figure>
<p>而函数模板参数的推断过程会尝试着去找到一个参数<strong>使得推断出的参数与调用的参数保持一致</strong> - <em>the deduction process attempts to find template argument values that will make the deduced A identical to A where A is the type of the argument of the call</em><br>
<code>getFoo()</code> 返回 <code>int&amp;</code> 类型，C++ 标准规定，如果表达式最初具有 <code>T&amp;</code> 类型，在进行任何 further analysis 之前类型都会被调整为 <code>T</code>。<br>
因此 <code>a.getFoo()</code> 的类型被推断为 <code>int</code>，也就是说 <code>f(T t)</code> 中 <code>T</code> 也为 <code>int</code>，<code>bar</code> 的类型也为 <code>int</code>。</p>
<h4 id="Q-174">Q 174</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    f(x,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：01<br>
变量 a 和 b 都绑定在同一个 x 上，const int&amp; b 表示函数中不能通过引用修改传入参数的值。</p>
<h4 id="Q-177">Q 177</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;::digits;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：输出不确定（可能为 8）<br>
大概率的搞笑题，<code>unsigned char</code> 和 <code>char</code> 大小相同，<code>char</code> 的大小足以存储实现的基本字符集的任何成员即可。</p>
<h4 id="Q-184">Q 184</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"i"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Derived</span> :</span> Base &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span>)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"d"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Derived d;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    d.f(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：d<br>
重载解析之所以没有选择明显更优的函数 void f(int)，因为 void f(int) 根本不在重载解析的范围内。<br>
派生类中引入函数名称 f 时将会隐藏基类中的同名函数。</p>
<h4 id="Q-186">Q 186</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">takes_pointer</span><span class="params">(<span class="keyword">int</span>* pointer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeid</span>(pointer) == <span class="keyword">typeid</span>(<span class="keyword">int</span>[])) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeid</span>(pointer) == <span class="keyword">typeid</span>(<span class="keyword">int</span>*)) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'p'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">takes_array</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeid</span>(<span class="built_in">array</span>) == <span class="keyword">typeid</span>(<span class="keyword">int</span>[])) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeid</span>(<span class="built_in">array</span>) == <span class="keyword">typeid</span>(<span class="keyword">int</span>*)) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'p'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* pointer = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    takes_pointer(<span class="built_in">array</span>);</span><br><span class="line">    takes_array(pointer);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">typeid</span>(<span class="keyword">int</span>*) == <span class="keyword">typeid</span>(<span class="keyword">int</span>[]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：pp0<br>
接收指针作为参数的函数也能够使用数组来调用，反之亦然。<br>
先看 <code>takes_pointer(array)</code>，当函数需要一个指针作为参数时，如果传入的是一个数组，该数组会退化成一个指针。<br>
更准确地说，一个元素类型为 T 的数组类型的左值或者右值可以转化为指向 T 类型的指针的纯右值。<br>
因此数组 array 会转化成指向 <code>int</code> 类型的指针，这个指针是一个纯右值。<br>
再看 <code>takes_array(pointer)</code>，C++ 标准规定，在确定了每个参数的类型后，任何 T 类型的数组都会被转换成 T 类型的指针。<br>
因此 <code>takes_array(int array[])</code> 中的 array[] 其实已经被转换为 <code>int*</code> 了。</p>
<h4 id="Q-187">Q 187</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span> &#123;</span></span><br><span class="line">    C() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span>; &#125;</span><br><span class="line">    C(<span class="keyword">const</span> C&amp; other) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span>; &#125;</span><br><span class="line">    C&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> C&amp; other) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"3"</span>; <span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C c1;</span><br><span class="line">    C c2 = c1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：12<br>
拷贝构造指的是通过 <em>brace-or-equal-initializer</em> 方式初始化的构造，<code>C c2 = c1</code> 就是通过 equal 来<strong>构造一个新的对象</strong>。</p>
<h4 id="Q-188">Q 188</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* a = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(<span class="string">"Hello"</span>);</span><br><span class="line">    a[<span class="number">4</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：未定义行为<br>
修改字符串字面量是未定义行为，实际上，字符串字面量的存储是在只读存储区内。<br>
此外，对于使用 <code>const_cast</code> 去除 <code>const</code> 限定的目的绝对不是为了修改它的内容，只是出于无奈。</p>
<h4 id="Q-190">Q 190</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    A(<span class="keyword">int</span> i) : m_i(i) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_i &gt; <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="keyword">int</span> m_i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1(1), a2(2);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a1 + a2 &lt;&lt; (a1 == a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：21<br>
<code>a1 + a2</code> 和 <code>a1 == a2</code> 使用的都是 <code>int</code> 类型的内建运算符。a1 和 a2 先是隐式转换为 <code>bool</code> 然后再隐式转换为 <code>int</code>。<br>
由于结构体 A 并没有重载 <code>operator+</code>，使用的是 <code>int</code> 的内建运算符，那么我们有什么方法可以将 a1 和 a2 转换成语 <code>operator+</code> 兼容呢，首先尝试的是用户自动一的转换函数 <code>bool()</code>，因为一个纯右值的 <code>bool</code> 量能够转换成 <code>int</code> 类型，因此隐式转换继续执行，true 会被转换为 1，false 会被转换为 0，<code>operator==</code> 也是同样的转换方式。</p>
<h4 id="Q-191">Q 191</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> A&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="string">"C"</span> <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> B&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="string">"C"</span> <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A::x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; B::x;</span><br><span class="line">    A::x = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; B::x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：01<br>
出现在不同命名空间范围内的具有相同名称的变量的两个声明指的是同一个变量。</p>
<h4 id="Q-192">Q 192</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    v.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    v.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    g(f1(), f2());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    h();</span><br><span class="line">    h();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (v[<span class="number">0</span>] == v[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：程序行为未指定<br>
函数参数表达式的计算顺序是未指定的，我们唯一能确定的就是函数 f1 和 f2 会在函数 g 执行之前执行完毕。</p>
<h4 id="Q-193">Q 193</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &lt;%<span class="number">1</span>%&gt;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a&lt;:<span class="number">0</span>:&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1<br>
C++ 标准为一些标点符号提供了可选标记，原代码等价于下面的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<p>除了拼写不同，这些符号的行为都是相同的，即：<br>
<code>&lt;%%&gt;</code> 等价于 <code>{}</code><br>
<code>&lt;::&gt;</code> 等价于 <code>[]</code></p>
<h4 id="Q-196">Q 196</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> x &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> C&amp; i)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> y &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> x::C&amp; i)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f(x::C());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1<br>
函数 f(x::C()) 调用没有指定命名空间，但是 C++ 中使用了依赖于实参名字的查找，函数参数的命名空间被添加到函数命名空间的查找中，因为我们将 x::C() 传递给了函数 f，因此在编译函数 f 时也会查找命名空间 x 并找到 x::f。</p>
<h4 id="Q-198">Q 198</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="string">"C"</span> &#123; <span class="keyword">int</span> x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> B &#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="string">"C"</span> &#123; <span class="keyword">int</span> x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A::x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; B::x;</span><br><span class="line">    A::x = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; B::x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：编译错误<br>
C++ 标准规定，出现在不同命名空间范围中的具有相同名称的 C 语言链接的变量的两个声明指的是同一个变量。因此 A::x 和 B::x 表示的是同一个变量。<br>
这道题与 #191 的不同之处在于 int x 是一个定义而不是声明，直接包含在链接规范中的声明被看作包含 extern 说明符，而变量 x 并没有直接包含在链接规范中，因此它没有隐式的 extern 说明，这两个 x 被看作重复定义。<br>
具体的区别还可以参考下面的代码来理解：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// declaration</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">// definition</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Programming-Language</tag>
        <tag>C++ Quiz</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Quiz 题解 001~100</title>
    <url>/posts/e24af74a/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>C++ Quiz 题解 001~100 整理</li>
<li>有趣的题目：</li>
<li>018 027 031 033 041 052</li>
</ul>
</blockquote>
<a id="more"></a>
<h4 id="Q-001">Q 001</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">f</span>(<span class="title">T</span> &amp;<span class="title">i</span>) &#123;</span> <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;i)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line">    f(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1<br>
<code>template &lt;&gt; void f(const int &amp;i)</code> 中 T 的类型为 <code>const int</code>，<code>f(i)</code> 中的 i 为 <code>int</code> 型，模板参数推导出 <code>T = int</code>。</p>
<h4 id="Q-002">Q 002</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f(<span class="string">"foo"</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *bar = <span class="string">"bar"</span>;</span><br><span class="line">    f(bar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：22<br>
字符串字面量不是 <code>std::string</code> 类型，而是一个 <code>const char*</code> 类型，如果要让编译器选择 <code>f(const std::string &amp;)</code>，用户必须通过转换来创造一个临时的 <code>std::string</code> 对象，而使用 <code>f(const void *)</code> 不需要用户自定义的转换。</p>
<h4 id="Q-004">Q 004</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span>)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span>)</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f(<span class="number">2.5</span>);</span><br><span class="line">    f(<span class="number">2.5f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：21<br>
浮点数字面量 2.5 是 <code>double</code> 类型的，2.5f 是 <code>float</code> 类型的</p>
<h4 id="Q-008">Q 008</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(A a)</span> </span>&#123; a.f(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    g(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：A<br>
<code>g(A a)</code> 是通过值传递接收一个 A 类型的对象而不是通过引用传递，因此这里会调用 A 的拷贝构造函数生成一个临时对象传给函数，因此函数 <code>g(A a)</code> 中的 a 是一个全新的 A，这也是常见的对象切片问题。</p>
<h4 id="Q-009">Q 009</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    b = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = f(a, a);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b &lt;&lt; c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：428<br>
传入的两个参数都是变量 a，因此 b 不会被修改</p>
<h4 id="Q-011">Q 011</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：0<br>
由于 a 是在命名空间范围内声明的，它具有静态存储期，并且它未初始化，因此默认初始化为 0，此时不需要在前面添加 <code>static</code> 关键字，否则只是表示内部连接，外部不可见。</p>
<h4 id="Q-013">Q 013</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a"</span>; &#125;</span><br><span class="line">    ~A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"b"</span>; &#125;</span><br><span class="line">    ~B() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c"</span>; &#125;</span><br><span class="line">    ~C() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"C"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C c;</span><br><span class="line">    B b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：acbBCA<br>
a 一定会在 c 和 b 之前初始化。</p>
<h4 id="Q-014">Q 014</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a"</span>; &#125;</span><br><span class="line">    ~A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"b"</span>; &#125;</span><br><span class="line">    ~B() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c"</span>; &#125;</span><br><span class="line">    ~C() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"C"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="keyword">static</span> C c; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：abcBCA<br>
a 不是 constexpr，因此 a 的初始化是动态的并且具有全局作用域<br>
接下来初始化 b，静态局部变量会在第一次执行到它的时候初始化<br>
当 main 退出时，b 超出作用域先被析构，所有静态变量按照初始化的相反顺序析构</p>
<h4 id="Q-015">Q 015</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (x++ == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::exception();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'A'</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'b'</span>; &#125;</span><br><span class="line">    ~B() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'B'</span>; &#125;</span><br><span class="line">    A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="keyword">static</span> B b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        foo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="built_in">std</span>::exception &amp;) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'c'</span>;</span><br><span class="line">        foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：acabBA<br>
静态局部变量在第一次访问它的时候初始化，第一次调用 <code>foo</code> 时，尝试初始化 b，在调用 B 的构造函数之前首先构造类 B 的成员变量，因此先调用 <code>A::A()</code>，打印 a，该构造函数抛出一个异常，中止构造，被 <code>catch(std::exception &amp;)</code> 捕捉到，打印 c，第二次调用 <code>foo</code> 函数，因为 b 第一次没有被成功初始化，此时会再次尝试构造 b，这次构造成功，打印 ab，当 main 结束后，静态变量 b 被析构，最后析构成员变量 a。</p>
<h4 id="Q-016">Q 016</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'a'</span>; &#125;</span><br><span class="line">    ~A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'A'</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'b'</span>; &#125;</span><br><span class="line">    ~B() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'B'</span>; &#125;</span><br><span class="line">    A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; B b; &#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：abBA<br>
先构造父类再构造子类，先析构子类再析构父类</p>
<h4 id="Q-017">Q 017</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'a'</span>; &#125;</span><br><span class="line">    ~A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'A'</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'b'</span>; &#125;</span><br><span class="line">    ~B() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'B'</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; B b; &#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：abBA<br>
构造先 A 后 B，析构先 B 后 A。</p>
<h4 id="Q-018">Q 018</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(A &amp;a)</span> </span>&#123; a.f(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    g(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：B<br>
这道题的难点在于尽管 B::f() 是私有的，它仍然能够被它的基类引用成功调用。</p>
<h4 id="Q-024">Q 024</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：0<br>
<code>numeric_limits</code> 类模板用于提供查询各种算术类型属性的标准化方式，<code>std::numeric_limits&lt;unsigned int&gt;::max()</code> 表示的是无符号整型的最大可能值，加 1 之后溢出了，i 重新回到了 0。</p>
<h4 id="Q-025">Q 025</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">int</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：程序行为未定义<br>
C++ 标准规定，有符号整数溢出是未定义的行为 - 如果在计算一个表达式时，结果在数学上没有定义或者不在其类型的可表示值的范围内，那么该行为是未定义的。</p>
<h4 id="Q-026">Q 026</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i / --j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：程序行为未定义<br>
对 0 的 <code>/</code> 操作与 <code>%</code> 操作都是未定义行为。</p>
<h4 id="Q-027">Q 027</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="built_in">std</span>::ostream &amp;<span class="title">put</span><span class="params">(<span class="built_in">std</span>::ostream &amp;o)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o &lt;&lt; <span class="string">'A'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> :</span> A &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="built_in">std</span>::ostream &amp;<span class="title">put</span><span class="params">(<span class="built_in">std</span>::ostream &amp;o)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o &lt;&lt; <span class="string">'B'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream &amp;o, <span class="keyword">const</span> A &amp;a) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">put</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：B<br>
这是一种获得 <code>operator &lt;&lt;</code> 多态的方法。</p>
<h4 id="Q-028">Q 028</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span>; &#125;</span><br><span class="line">    A(<span class="keyword">const</span> A &amp;a) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B"</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"C"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">        x.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：AABCBC<br>
数组初始化的时候，调用默认构造函数，输出 AA，循环数组的时候 <code>auto</code> 推断 x 的类型为 A，因此调用拷贝构造函数后再调用 f，输出 BCBC。</p>
<h4 id="Q-029">Q 029</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    A() &#123; foo(); &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~A() &#123; foo(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; foo(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    b.bar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：121<br>
虽然 <code>foo()</code> 是虚函数，但是在基类的构造和析构函数调用时不会执行，因为此时的派生类不存在。<br>
基类析构函数写成虚函数是为了防止基类指针在析构派生类对象时只能析构基类对象造成内存泄露。</p>
<h4 id="Q-030">Q 030</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">    X() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"X"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="function">X <span class="title">x</span><span class="params">()</span></span>; &#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：输出为空<br>
<code>X x()</code> 是函数原型，不是实例化类 X，如果要输出 X，可以将代码修改为 <code>X x{}</code></p>
<h4 id="Q-031">Q 031</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">    X() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"X"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Y</span> &#123;</span></span><br><span class="line">    Y(<span class="keyword">const</span> X &amp;x) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Y"</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"f"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Y <span class="title">y</span><span class="params">(X())</span></span>;</span><br><span class="line">    y.f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：编译错误<br>
<code>Y y(X())</code> 原先的意图是定义一个 Y 类型的变量，而本题中的 y 是一个参数为函数 X()（无参数，返回值为 X），返回值为 Y 的函数，如果要修改，应改为 <code>Y y{X{}}</code>。</p>
<h4 id="Q-032">Q 032</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">    X() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a"</span>; &#125;</span><br><span class="line">    X(<span class="keyword">const</span> X &amp;x) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"b"</span>; &#125;</span><br><span class="line">    <span class="keyword">const</span> X &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> X &amp;x) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c"</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    X x;</span><br><span class="line">    <span class="function">X <span class="title">y</span><span class="params">(x)</span></span>;</span><br><span class="line">    X z = y;</span><br><span class="line">    z = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：ABBC<br>
<code>X y(x)</code> 调用的是拷贝构造函数。</p>
<h4 id="Q-033">Q 033</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GeneralException</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"G"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SpecialException</span> :</span> <span class="keyword">public</span> GeneralException &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"S"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> SpecialException(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        f();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (GeneralException e) &#123;</span><br><span class="line">        e.<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：G<br>
我们抛出了一个 SpecialException 异常，这是一个 GeneralException 的派生类，但是该异常是被值捕获的，因此 e 具有的是动态类型 GeneralException 而不是 SpecialException，这就是对象切片。<br>
我们应该通过 <code>catch(GeneralException&amp; e)</code> 来捕获这个异常，这样程序输出才为 S。</p>
<h4 id="Q-037">Q 037</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">decltype</span>(a) b = a;</span><br><span class="line">    b++;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：01<br>
<code>auto</code> 忽略顶层 <code>const</code>，<code>decltype</code> 保留顶层 <code>const</code><br>
对引用操作，<code>auto</code> 推断出原有类型，<code>decltype</code> 推断出引用<br>
对解引用操作，<code>auto</code> 推断出原有类型，<code>decltype</code> 推断出引用</p>
<h4 id="Q-041">Q 041</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>[<span class="string">"ABC"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：B<br>
表达式 <code>E1[E2]</code> 含义是 <code>*((E1) + (E2))</code>，所以 <code>1[&quot;ABC&quot;]</code> 可以写为 <code>*(&quot;ABC&quot; + 1)</code>，这相当于直接取出字母 B。</p>
<h4 id="Q-042">Q 042</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span>; &#125;</span><br><span class="line">    A(<span class="keyword">int</span>) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span>; &#125;</span><br><span class="line">    A(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt;) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"3"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    A a1;</span><br><span class="line">    A a2&#123;&#125;;</span><br><span class="line">    A a3&#123; <span class="number">1</span> &#125;;</span><br><span class="line">    A a4&#123; <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：1133<br>
初始化列表构造函数是贪婪的，对于 a3 来说，即使 <code>A(int)</code> 也是满足条件的构造函数，编译器仍然会优先考虑 <code>initializer_list&lt;int&gt;</code>。</p>
<h4 id="Q-044">Q 044</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"X"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Y</span> :</span> <span class="keyword">public</span> X &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Y"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> X &amp;x)</span> </span>&#123; x.f(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    X arr[<span class="number">1</span>];</span><br><span class="line">    Y y1;</span><br><span class="line">    arr[<span class="number">0</span>] = y1;</span><br><span class="line">    <span class="built_in">print</span>(y1);</span><br><span class="line">    <span class="built_in">print</span>(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：YX<br>
<code>arr</code> 是 X 的数组，而不是指向 X 的指针，当类型为 Y 的对象存入该数组中时会被转化为 X 类型，因此存入数组 <code>arr</code> 中的对象 y1 失去对象的 Y 的那一部分，这种现象也被称为对象切片。</p>
<h4 id="Q-049">Q 049</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C(<span class="keyword">int</span> i) : i(i) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i; &#125;</span><br><span class="line">    ~C() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i + <span class="number">5</span>; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> C &amp;c = C(<span class="number">1</span>);</span><br><span class="line">    C(<span class="number">2</span>);</span><br><span class="line">    C(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：127386<br>
临时变量一般在该行运行结束时就要被销毁，而第一个变量 C(1) 因为与变量 c 引用绑定，该临时变量的生存期被延长到和 c 一样，所以整个过程是 <code>C(1) C(2) ~C(2) C(3) ~C(3) ~C(1)</code>。</p>
<h4 id="Q-052">Q 052</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B"</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> B <span class="title">A::createB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A"</span>; &#125;</span><br><span class="line">    <span class="function">B <span class="title">createB</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> B(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    B b = a.createB();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>A</strong>：编译错误<br>
当声明函数 <code>A::createB()</code> 为类 B 的友元函数时，编译器并不知道这个函数存在，因为它只看到了类 A 的声明而不是类 A 的定义。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Programming-Language</tag>
        <tag>C++ Quiz</tag>
      </tags>
  </entry>
  <entry>
    <title>在博客中显示文章阅读量排行</title>
    <url>/posts/a510178f/</url>
    <content><![CDATA[<blockquote>
<p>解决 Hexo 博客升级后文章阅读量排行失效的问题</p>
</blockquote>
<a id="more"></a>
<p>博客从 <code>Hexo-3.8</code> <code>Next-6.7.0</code> 更新到了 <code>Hexo-4.2</code> <code>Next-7.7.1</code> 之后，原来的文章阅读量排行失效了，<code>F12</code> 发现下面的 URL 报错 <code>401 - unauthorized</code>：<br>
<code>https://us.leancloud.cn/1.1/classes/Comment?redirectByAPI=cn</code></p>
<p>错误原因是原 SDK 版本太低，将 <code>top/index.md</code> 中的<br>
<code>&lt;script src=&quot;https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js&quot;&gt;&lt;/script&gt;</code><br>
修改为：<br>
<code>&lt;script src=&quot;https://cdn1.lncld.net/static/js/3.10.0/av-min.js&quot;&gt;&lt;/script&gt;</code></p>
<p>重新 hexo 三连，问题解决。</p>
<p>完整代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"top"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn1.lncld.net/</span><span class="keyword">static</span>/js/<span class="number">3.10</span><span class="number">.0</span>/av-min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">AV.initialize("</span>APP-ID<span class="string">", "</span>APP-KEY<span class="string">");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  var time=0</span></span><br><span class="line"><span class="string">  var title="</span><span class="string">"</span></span><br><span class="line"><span class="string">  var url="</span><span class="string">"</span></span><br><span class="line"><span class="string">  var query = new AV.Query('Counter');</span></span><br><span class="line"><span class="string">  query.notEqualTo('id',0);</span></span><br><span class="line"><span class="string">  query.descending('time');</span></span><br><span class="line"><span class="string">  query.limit(1000);</span></span><br><span class="line"><span class="string">  query.find().then(function (todo) &#123;</span></span><br><span class="line"><span class="string">    for (var i=0;i&lt;1000;i++)&#123;</span></span><br><span class="line"><span class="string">      var result=todo[i].attributes;</span></span><br><span class="line"><span class="string">      time=result.time;</span></span><br><span class="line"><span class="string">      title=result.title;</span></span><br><span class="line"><span class="string">      url=result.url;</span></span><br><span class="line"><span class="string">      var content="</span>&lt;p&gt;<span class="string">"+"</span>&lt;font color=<span class="string">'#1C1C1C'</span>&gt;<span class="string">"+"</span>&lt;<span class="regexp">/font&gt;"+"&lt;a href='"+"https:/</span><span class="regexp">/archiescott.github.io/</span><span class="string">"+url+"</span><span class="string">'&gt;"+title+"&lt;/a&gt;"+"&lt;br&gt;"+"阅读次数："+time+"&lt;br&gt;"+"&lt;/p&gt;";</span></span><br><span class="line"><span class="string">      document.getElementById("top").innerHTML+=content</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;, function (error) &#123;</span></span><br><span class="line"><span class="string">    console.log("error");</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 中的 syncPrimitives：lock</title>
    <url>/posts/47473230/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>最基础的锁管理 lock_guard</li>
<li>支持同时锁定多个互斥量的 lock 方法</li>
<li>通过 lock 方法批量管理互斥量的 scoped_lock</li>
<li>支持同时尝试锁定多个互斥量的 try_lock 方法</li>
<li>支持多种 locktag 管理的独占型 unique_lock</li>
<li>支持多种 locktag 管理的共享型 shared_lock</li>
<li>保证只执行一次的 call_once 方法</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="std-lock-guard">std::lock_guard</h2>
<h3 id="std-lock-guard-特性"><code>std::lock_guard</code> 特性</h3>
<p><code>lock_guard</code> 是一种互斥封装器，利用 RAII 机制为代码块提供 <code>mutex</code> 的所有权。</p>
<p><code>lock_guard</code> 的拷贝构造与赋值函数均为 <code>delete</code>。</p>
<p><code>explicit lock_guard(mutex_type&amp; m)</code> 相当于调用 <code>m.lock()</code>，如果当前线程已经拥有了 mutex，则该行为未定义。</p>
<p><code>lock_guard(mutex_type&amp; m, std::adopt_lock_t t)</code> 用到了后面的 <code>locktag</code>，<strong>用于该线程已经获取 <code>mutex</code> 的情况下将 <code>mutex</code> 交给 <code>lock_guard</code> 接管</strong>，看个例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span> <span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    mtx.lock();</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(mtx, <span class="built_in">std</span>::adopt_lock)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"thread id: "</span> &lt;&lt; id &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::thread threads[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">        threads[i] = <span class="built_in">std</span>::thread(<span class="built_in">process</span>, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : threads)</span><br><span class="line">        t.join();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="std-lock-guard-示例"><code>std::lock_guard</code> 示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g_i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::mutex g_i_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">safe_increment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// g_i_mutex 在锁离开作用域时自动释放</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(g_i_mutex)</span></span>;</span><br><span class="line">    ++g_i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::this_thread::get_id() &lt;&lt; <span class="string">": "</span> &lt;&lt; g_i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"main: "</span> &lt;&lt; g_i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t1</span><span class="params">(safe_increment)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t2</span><span class="params">(safe_increment)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"main: "</span> &lt;&lt; g_i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="std-lock">std::lock</h2>
<h3 id="std-lock-特性"><code>std::lock</code> 特性</h3>
<p>当需要同时操作两个或两个以上对象时，就需要同时锁定这些对象，而不是将它们依次锁定。</p>
<p><code>lock(Lockable1&amp; lock1, ..., LockableN&amp; lockn)</code> 能够以避免死锁的方式锁定给定的对象，如果在调用 <code>lock</code> 或 <code>unlock</code> 时发生了异常，会将已上锁的对象全部解锁。</p>
<h3 id="std-lock-示例"><code>std::lock</code> 示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class Employee，将他的 lunch_partners 放入 vector 中输出</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Employee</span> &#123;</span></span><br><span class="line">    Employee(<span class="built_in">std</span>::<span class="built_in">string</span> id) : id(id) &#123;&#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> id;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; lunch_partners;</span><br><span class="line">    <span class="built_in">std</span>::mutex m;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">output</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> ret = <span class="string">"Employee "</span> + id + <span class="string">" has lunch partners: "</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span>&amp; partner : lunch_partners )</span><br><span class="line">            ret += partner + <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">send_mail</span><span class="params">(Employee &amp;, Employee &amp;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 模拟耗时的发信操作</span></span><br><span class="line">    <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign_lunch_partner</span><span class="params">(Employee &amp;e1, Employee &amp;e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 静态 mutex 对象</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::mutex io_mutex;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 排队 wait for lock</span></span><br><span class="line">        <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lk</span><span class="params">(io_mutex)</span></span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e1.id &lt;&lt; <span class="string">" and "</span> &lt;&lt; e2.id &lt;&lt; <span class="string">" are waiting for locks"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时使用 lock 同时锁定两个需要操作的对象，而不是先锁一个再锁一个</span></span><br><span class="line">    <span class="comment">// 使用 lock_guard + std::adopt_lock 接管，方便解锁</span></span><br><span class="line">    <span class="comment">// 此时 e1 与 e2 已经被锁定，不能再和别的 employee have lunch 了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::lock(e1.m, e2.m);</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lk1</span><span class="params">(e1.m, <span class="built_in">std</span>::adopt_lock)</span></span>;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lk2</span><span class="params">(e2.m, <span class="built_in">std</span>::adopt_lock)</span></span>;</span><br><span class="line"><span class="comment">// 等价代码（若需要 unique_locks ，例如对于条件变量）</span></span><br><span class="line"><span class="comment">//        std::unique_lock&lt;std::mutex&gt; lk1(e1.m, std::defer_lock);</span></span><br><span class="line"><span class="comment">//        std::unique_lock&lt;std::mutex&gt; lk2(e2.m, std::defer_lock);</span></span><br><span class="line"><span class="comment">//        std::lock(lk1, lk2);</span></span><br><span class="line"><span class="comment">// C++17 中可用的较优解法</span></span><br><span class="line"><span class="comment">//        std::scoped_lock lk(e1.m, e2.m);</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lk</span><span class="params">(io_mutex)</span></span>;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e1.id &lt;&lt; <span class="string">" and "</span> &lt;&lt; e2.id &lt;&lt; <span class="string">" got locks"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        e1.lunch_partners.push_back(e2.id);</span><br><span class="line">        e2.lunch_partners.push_back(e1.id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 告知午餐指派</span></span><br><span class="line">    send_mail(e1, e2);</span><br><span class="line">    send_mail(e2, e1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Employee alice("alice"), bob("bob"), christina("christina"), dave("dave");</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在平行线程指派，因为发邮件给用户告知午餐指派，会消耗长时间</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::thread&gt; threads;</span><br><span class="line">    threads.emplace_back(assign_lunch_partner, <span class="built_in">std</span>::ref(alice), <span class="built_in">std</span>::ref(bob));</span><br><span class="line">    threads.emplace_back(assign_lunch_partner, <span class="built_in">std</span>::ref(christina), <span class="built_in">std</span>::ref(bob));</span><br><span class="line">    threads.emplace_back(assign_lunch_partner, <span class="built_in">std</span>::ref(christina), <span class="built_in">std</span>::ref(alice));</span><br><span class="line">    threads.emplace_back(assign_lunch_partner, <span class="built_in">std</span>::ref(dave), <span class="built_in">std</span>::ref(bob));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 资源回收</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;thread : threads) thread.join();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; alice.output() &lt;&lt; <span class="string">'\n'</span>  &lt;&lt; bob.output() &lt;&lt; <span class="string">'\n'</span></span><br><span class="line">              &lt;&lt; christina.output() &lt;&lt; <span class="string">'\n'</span> &lt;&lt; dave.output() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="std-scoped-lock">std::scoped_lock</h2>
<h3 id="std-scoped-lock-特性"><code>std::scoped_lock</code> 特性</h3>
<p><code>scoped_lock</code> 在作用域块的存在期间占有一或多个互斥，当 <code>scoped_lock</code> 析构时以逆序释放锁。</p>
<p><code>scoped_lock(MutexTypes&amp; ... m)</code><br>
当 <code>sizeof(MutexTypes) == 0</code> 时无事发生<br>
当 <code>sizeof(MutexTypes) == 1</code> 时等效于 <code>m.lock()</code><br>
否则等效于 <code>std::lock(m...)</code></p>
<p><code>scoped_lock( std::adopt_lock_t, MutexTypes&amp;... m )</code><br>
<code>scoped_lock</code> 也可以批量接管 <code>mutex</code>。</p>
<p><code>scoped_lock</code> 不能复制，但是可以移动。</p>
<h3 id="std-scoped-lock-示例"><code>std::scoped_lock</code> 示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Employee</span> &#123;</span></span><br><span class="line">    Employee(<span class="built_in">std</span>::<span class="built_in">string</span> id) : id(id) &#123;&#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> id;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; lunch_partners;</span><br><span class="line">    <span class="built_in">std</span>::mutex m;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">output</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> ret = <span class="string">"Employee "</span> + id + <span class="string">" has lunch partners: "</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span>&amp; partner : lunch_partners )</span><br><span class="line">            ret += partner + <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">send_mail</span><span class="params">(Employee &amp;, Employee &amp;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign_lunch_partner</span><span class="params">(Employee &amp;e1, Employee &amp;e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::mutex io_mutex;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lk</span><span class="params">(io_mutex)</span></span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e1.id &lt;&lt; <span class="string">" and "</span> &lt;&lt; e2.id &lt;&lt; <span class="string">" are waiting for locks"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 用 scoped_lock 相当于锁定并接管了 e1.m e2.m</span></span><br><span class="line">        <span class="function"><span class="built_in">std</span>::scoped_lock <span class="title">lock</span><span class="params">(e1.m, e2.m)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等价代码 1 （用 std::lock 和 std::lock_guard ）</span></span><br><span class="line">        <span class="comment">// std::lock(e1.m, e2.m);</span></span><br><span class="line">        <span class="comment">// std::lock_guard&lt;std::mutex&gt; lk1(e1.m, std::adopt_lock);</span></span><br><span class="line">        <span class="comment">// std::lock_guard&lt;std::mutex&gt; lk2(e2.m, std::adopt_lock);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等价代码 2 （若需要 unique_lock ，例如对于条件变量）</span></span><br><span class="line">        <span class="comment">// std::unique_lock&lt;std::mutex&gt; lk1(e1.m, std::defer_lock);</span></span><br><span class="line">        <span class="comment">// std::unique_lock&lt;std::mutex&gt; lk2(e2.m, std::defer_lock);</span></span><br><span class="line">        <span class="comment">// std::lock(lk1, lk2);</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lk</span><span class="params">(io_mutex)</span></span>;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e1.id &lt;&lt; <span class="string">" and "</span> &lt;&lt; e2.id &lt;&lt; <span class="string">" got locks"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        e1.lunch_partners.push_back(e2.id);</span><br><span class="line">        e2.lunch_partners.push_back(e1.id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    send_mail(e1, e2);</span><br><span class="line">    send_mail(e2, e1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Employee alice("alice"), bob("bob"), christina("christina"), dave("dave");</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在并行线程中指派，send_mail 耗时较长</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::thread&gt; threads;</span><br><span class="line">    threads.emplace_back(assign_lunch_partner, <span class="built_in">std</span>::ref(alice), <span class="built_in">std</span>::ref(bob));</span><br><span class="line">    threads.emplace_back(assign_lunch_partner, <span class="built_in">std</span>::ref(christina), <span class="built_in">std</span>::ref(bob));</span><br><span class="line">    threads.emplace_back(assign_lunch_partner, <span class="built_in">std</span>::ref(christina), <span class="built_in">std</span>::ref(alice));</span><br><span class="line">    threads.emplace_back(assign_lunch_partner, <span class="built_in">std</span>::ref(dave), <span class="built_in">std</span>::ref(bob));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;thread : threads) thread.join();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; alice.output() &lt;&lt; <span class="string">'\n'</span>  &lt;&lt; bob.output() &lt;&lt; <span class="string">'\n'</span></span><br><span class="line">              &lt;&lt; christina.output() &lt;&lt; <span class="string">'\n'</span> &lt;&lt; dave.output() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="std-try-lock">std::try_lock</h2>
<h3 id="std-try-lock-特性"><code>std::try_lock</code> 特性</h3>
<p><code>int try_lock( Lockable1&amp; lock1, ..., LockableN&amp;... lockn)</code><br>
会尝试给 <code>lock1</code> 到 <code>lockn</code> 依次 <code>try_lock</code>，当 <code>try_lock</code> 失败时就不再继续调用 <code>try_lock</code>，并且已锁对象会依次 <code>unlock</code>。锁定失败返回对象下标，如果锁定成功返回 -1。</p>
<p>用陈硕的话来说，<code>try_lock</code> 在生产代码中并不多见，因为程序大多时候都不需要试着去锁一锁。</p>
<h3 id="std-try-lock-示例"><code>std::try_lock</code> 示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> foo_count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::mutex foo_count_mutex;</span><br><span class="line">    <span class="keyword">int</span> bar_count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::mutex bar_count_mutex;</span><br><span class="line">    <span class="keyword">int</span> overall_count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> done = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">std</span>::mutex done_mutex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> increment = [](<span class="keyword">int</span> &amp;counter, <span class="built_in">std</span>::mutex &amp;m, <span class="keyword">const</span> <span class="keyword">char</span> *desc) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(m);</span><br><span class="line">            ++counter;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; desc &lt;&lt; <span class="string">": "</span> &lt;&lt; counter &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两个线程分别获取自身的 mutex 后修改自身的 count</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">increment_foo</span><span class="params">(increment, <span class="built_in">std</span>::ref(foo_count), <span class="built_in">std</span>::ref(foo_count_mutex), <span class="string">"foo"</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">increment_bar</span><span class="params">(increment, <span class="built_in">std</span>::ref(bar_count), <span class="built_in">std</span>::ref(bar_count_mutex), <span class="string">"bar"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引用捕获创建线程</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">update_overall</span><span class="params">([&amp;]() &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        done_mutex.lock();</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">while</span> (!done) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            done_mutex.unlock();</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> result = <span class="built_in">std</span>::try_lock(foo_count_mutex, bar_count_mutex);</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="comment">// 如果锁定成功将两个 count 计入总数</span></span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                overall_count += foo_count + bar_count;</span></span></span><br><span class="line"><span class="function"><span class="params">                foo_count = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">                bar_count = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"overall: "</span> &lt;&lt; overall_count &lt;&lt; <span class="string">'\n'</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">                foo_count_mutex.unlock();</span></span></span><br><span class="line"><span class="function"><span class="params">                bar_count_mutex.unlock();</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">2</span>));</span></span></span><br><span class="line"><span class="function"><span class="params">            done_mutex.lock();</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">        done_mutex.unlock();</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">    increment_foo.join();</span><br><span class="line">    increment_bar.join();</span><br><span class="line">    <span class="comment">// 等待两个线程都结束了再修改 done</span></span><br><span class="line">    <span class="comment">// done 必须要在 while 循环中修改才行</span></span><br><span class="line">    done_mutex.lock();</span><br><span class="line">    done = <span class="literal">true</span>;</span><br><span class="line">    done_mutex.unlock();</span><br><span class="line">    update_overall.join();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Done processing\n"</span></span><br><span class="line">              &lt;&lt; <span class="string">"foo: "</span> &lt;&lt; foo_count &lt;&lt; <span class="string">'\n'</span></span><br><span class="line">              &lt;&lt; <span class="string">"bar: "</span> &lt;&lt; bar_count &lt;&lt; <span class="string">'\n'</span></span><br><span class="line">              &lt;&lt; <span class="string">"overall: "</span> &lt;&lt; overall_count &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="std-unique-lock">std::unique_lock</h2>
<h3 id="std-unique-lock-特性"><code>std::unique_lock</code> 特性</h3>
<p><code>unique_lock( unique_lock&amp;&amp; other ) noexcept</code><br>
<code>unique_lock</code> 不支持复制构造，但支持移动构造，用其他的 <code>unique_lock</code> 对象初始化新 <code>unique_lock</code> 对象</p>
<p><code>unique_lock( mutex_type&amp; m, locktag t )</code><br>
<code>locktag</code> 可以为下面三种：<br>
<code>std::defer_lock</code> 接管 <code>mutex</code> 但不锁定<br>
<code>std::try_to_lock</code> 接管 <code>mutex</code> 后尝试锁定，锁定失败也不会阻塞<br>
<code>std::adopt_lock</code> 锁定后接管 <code>mutex</code></p>
<p><code>unique_lock( mutex_type&amp; m, const std::chrono::duration&lt;Rep,Period&gt;&amp; timeout_duration )</code><br>
<code>unique_lock</code> 阻塞直至经过指定的 <code>timeout_duration</code> 或者获得锁。</p>
<p><code>unique_lock( mutex_type&amp; m, const std::chrono::time_point&lt;Clock,Duration&gt;&amp; timeout_time )</code><br>
<code>unique_lock</code> 阻塞直至到达指定的 <code>timeout_time</code> 或者获得锁。</p>
<p><code>unique_lock</code> 接管 <code>mutex</code> 之后可以调用 <code>lock</code> 和 <code>unlock</code> 来临时锁定和解锁线程，<code>unique_lock</code> 还可以通过 <code>release</code> 释放对 <code>mutex</code> 的管理。</p>
<h3 id="std-unique-lock-示例"><code>std::unique_lock</code> 示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Box</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Box</span><span class="params">(<span class="keyword">int</span> num)</span> : num_things</span>&#123;num&#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num_things;</span><br><span class="line">    <span class="built_in">std</span>::mutex m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 from 取 num 给 to</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Box &amp;from, Box &amp;to, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 只是接管，并未锁定</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock1</span><span class="params">(from.m, <span class="built_in">std</span>::defer_lock)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock2</span><span class="params">(to.m, <span class="built_in">std</span>::defer_lock)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 锁两个 unique_lock 而不死锁</span></span><br><span class="line">    <span class="built_in">std</span>::lock(lock1, lock2);</span><br><span class="line"></span><br><span class="line">    from.num_things -= num;</span><br><span class="line">    to.num_things += num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 'from.m' 与 'to.m' 互斥解锁于 'unique_lock' 析构函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Box <span class="title">acc1</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="function">Box <span class="title">acc2</span><span class="params">(<span class="number">50</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t1</span><span class="params">(<span class="built_in">transfer</span>, <span class="built_in">std</span>::ref(acc1), <span class="built_in">std</span>::ref(acc2), <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t2</span><span class="params">(<span class="built_in">transfer</span>, <span class="built_in">std</span>::ref(acc2), <span class="built_in">std</span>::ref(acc1), <span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::mutex m_a, m_b, m_c;</span><br><span class="line"><span class="keyword">int</span> a, b, c = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;   <span class="comment">// 注意：可用 std::lock_guard 或 atomic&lt;int&gt; 代替</span></span><br><span class="line">        <span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lk</span><span class="params">(m_a)</span></span>;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123; <span class="comment">// 注意：细节和替代品见 std::lock 及 std::scoped_lock</span></span><br><span class="line">        <span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lk_b</span><span class="params">(m_b, <span class="built_in">std</span>::defer_lock)</span></span>;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lk_c</span><span class="params">(m_c, <span class="built_in">std</span>::defer_lock)</span></span>;</span><br><span class="line">        <span class="built_in">std</span>::lock(lk_b, lk_c);</span><br><span class="line">        <span class="comment">// 用 newValue(b+c) 替换 c 的值，返回的 oldValue 赋值给 b</span></span><br><span class="line">        b = <span class="built_in">std</span>::exchange(c, b+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::thread&gt; threads;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i)</span><br><span class="line">        threads.emplace_back(update);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i: threads)</span><br><span class="line">        i.join();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">"'th and "</span> &lt;&lt; a + <span class="number">1</span> &lt;&lt; <span class="string">"'th Fibonacci numbers: "</span></span><br><span class="line">            &lt;&lt; b &lt;&lt; <span class="string">" and "</span> &lt;&lt; c &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="std-shared-lock">std::shared_lock</h2>
<h3 id="std-shared-lock-特性"><code>std::shared_lock</code> 特性</h3>
<p><code>shared_lock</code> 会以共享模式锁定 <code>mutex</code>，注意与 <code>unique_lock</code> 的排他性锁定相区分，<code>shared_lock</code> 类可移动，但不可复制。</p>
<p><code>explicit shared_lock( mutex_type&amp; m )</code><br>
相当于调用 <code>m.lock_shared()</code>，除此之外，<code>shared_lock</code> 也可以使用 <code>locktag</code>、<code>try_lock_shared_for</code>、<code>try_lock_shared_until</code>。</p>
<p>写到这里需要提醒一下 <code>mutex</code> 与 <code>lock</code> 的关系，<code>mutex</code> 是底层同步原语，而 <code>lock</code> 是通过 RAII 来管理 <code>mutex</code> 的对象，因此 <code>lock</code> 中的锁定与解锁其实是对 <code>mutex</code> 中锁定与解锁的封装。</p>
<h3 id="std-shared-lock-示例"><code>std::shared_lock</code> 示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;shared_mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::shared_timed_mutex m;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 两个线程都获得对整数 i 的访问</span></span><br><span class="line">   <span class="function"><span class="built_in">std</span>::shared_lock&lt;<span class="built_in">std</span>::shared_timed_mutex&gt; <span class="title">slk</span><span class="params">(m)</span></span>;</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"read i as "</span> &lt;&lt; i &lt;&lt; <span class="string">"...\n"</span>;</span><br><span class="line">   <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::milliseconds(<span class="number">10</span>));</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"woke up...\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="function"><span class="built_in">std</span>::thread <span class="title">r1</span><span class="params">(<span class="built_in">read</span>)</span></span>;</span><br><span class="line">   <span class="function"><span class="built_in">std</span>::thread <span class="title">r2</span><span class="params">(<span class="built_in">read</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   r1.join();</span><br><span class="line">   r2.join();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="locktag">locktag</h2>
<h3 id="locktag-属性"><code>locktag</code> 属性</h3>
<p><code>std::defer_lock</code> 为空标签类 <code>std::defer_lock_t</code> 的实例，只接管不上锁</p>
<p><code>std::try_to_lock</code> 为空标签类 <code>std::try_to_lock_t</code> 的实例，接管后尝试上锁，失败也不阻塞</p>
<p><code>std::adopt_lock</code> 为空标签类 <code>std::adopt_lock_t</code> 的实例，上锁后才接管</p>
<h3 id="locktag-示例"><code>locktag</code> 示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mutex 放在 struct 中防止多线程同时修改 bank_account</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bank_account</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">bank_account</span><span class="params">(<span class="keyword">int</span> balance)</span> : <span class="title">balance</span><span class="params">(balance)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> balance;</span><br><span class="line">    <span class="built_in">std</span>::mutex m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(bank_account &amp;from, bank_account &amp;to, <span class="keyword">int</span> amount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 锁定两个互斥而不死锁</span></span><br><span class="line">    <span class="built_in">std</span>::lock(from.m, to.m);</span><br><span class="line">    <span class="comment">// 保证二个已锁定互斥在作用域结尾解锁</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock1</span><span class="params">(from.m, <span class="built_in">std</span>::adopt_lock)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock2</span><span class="params">(to.m, <span class="built_in">std</span>::adopt_lock)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价方法：</span></span><br><span class="line"><span class="comment">//    std::unique_lock&lt;std::mutex&gt; lock1(from.m, std::defer_lock);</span></span><br><span class="line"><span class="comment">//    std::unique_lock&lt;std::mutex&gt; lock2(to.m, std::defer_lock);</span></span><br><span class="line"><span class="comment">//    std::lock(lock1, lock2);</span></span><br><span class="line"></span><br><span class="line">    from.balance -= amount;</span><br><span class="line">    to.balance += amount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">bank_account <span class="title">my_account</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="function">bank_account <span class="title">your_account</span><span class="params">(<span class="number">50</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t1</span><span class="params">(<span class="built_in">transfer</span>, <span class="built_in">std</span>::ref(my_account), <span class="built_in">std</span>::ref(your_account), <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t2</span><span class="params">(<span class="built_in">transfer</span>, <span class="built_in">std</span>::ref(your_account), <span class="built_in">std</span>::ref(my_account), <span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="std-call-once">std::call_once</h2>
<h3 id="std-call-once-属性"><code>std::call_once</code> 属性</h3>
<p>无论有多少个线程调用，<code>call_once</code> 只执行一次。</p>
<p><code>void call_once( std::once_flag&amp; flag, Callable&amp;&amp; f, Args&amp;&amp;... args )</code><br>
如果 <code>once_flag</code> 显示 <code>f</code> 已经被调用过了，<code>call_once</code> 立即返回，否则以参数 <code>args</code> 调用 <code>f</code>；调用过程中如果发生了异常，<code>once_flag</code> 不会翻转。</p>
<p>如果对于同一个 <code>once_flag</code>，<code>call_once</code> 调用不同的 <code>f</code>，无法确定调用的具体是哪一个 <code>f</code>。</p>
<h3 id="std-call-once-示例"><code>std::call_once</code> 示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::once_flag flag1, flag2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">simple_do_once</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::call_once(flag1, []()&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Simple example: called once\n"</span>; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">may_throw_function</span><span class="params">(<span class="keyword">bool</span> do_throw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (do_throw) &#123;</span><br><span class="line">        <span class="comment">// 可能有多次</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"throw: call_once will retry\n"</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::exception();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只会出现一次</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Didn't throw, call_once will not attempt again\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_once</span><span class="params">(<span class="keyword">bool</span> do_throw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::call_once(flag2, may_throw_function, do_throw);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (...) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 此处只会执行一次 flag1 对应的 lambda 表达式</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">st1</span><span class="params">(simple_do_once)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">st2</span><span class="params">(simple_do_once)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">st3</span><span class="params">(simple_do_once)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">st4</span><span class="params">(simple_do_once)</span></span>;</span><br><span class="line">    st1.join();</span><br><span class="line">    st2.join();</span><br><span class="line">    st3.join();</span><br><span class="line">    st4.join();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t1</span><span class="params">(do_once, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t2</span><span class="params">(do_once, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t3</span><span class="params">(do_once, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t4</span><span class="params">(do_once, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    t3.join();</span><br><span class="line">    t4.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MultiThreading</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Inter-Threading-Communication</tag>
        <tag>Multithreading</tag>
        <tag>Lock</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 中的 syncPrimitives：mutex</title>
    <url>/posts/2f6c672d/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>最基础的互斥量 mutex</li>
<li>能够定时尝试上锁的互斥量 timed_mutex</li>
<li>可重入的 recursive_mutex 与 recursive_timed_mutex</li>
<li>同时支持独占与共享管理的 shared_mutex 与 shared_timed_mutex</li>
</ul>
</blockquote>
<a id="more"></a>
<p>最近在撸日志库的时候发现了 C++11 竟然有这么多的 <code>mutex</code> 类型与 <code>lock</code> 类型，本篇先总结一下 <code>mutex</code> 类型。<br>
本文中的示例均来自 <em>CppReference</em>，仅添加部分注释，不再做特殊说明。</p>
<h2 id="std-mutex">std::mutex</h2>
<h3 id="std-mutex-特性"><code>std::mutex</code> 特性</h3>
<p><code>mutex</code> 类能够保护共享数据某个时刻只能允许单个线程访问。</p>
<p>当某个线程占有 <code>mutex</code> 时，<strong>其他</strong>试图获取 <code>mutex</code> 所有权的线程将会阻塞 - 通过 <code>lock</code> 调用，或者收到 <code>false</code> - 通过 <code>try_lock</code> 调用。</p>
<p>当某个线程占有 <code>mutex</code> 时，<strong>该线程</strong>再次尝试 <code>lock</code> 会出现未定义行为，比如死锁，C++ 标准推荐此时能够抛出 <code>std::system_error(resource_deadlock_would_occur)</code> 来取代死锁。</p>
<p><code>mutex</code> 的复制构造函数与赋值运算符都被 <code>delete</code> 掉，因为没有意义。</p>
<p><code>mutex</code> 类的成员函数 <code>lock</code> 与 <code>unlock</code> 不应该手工调用，而应该交给栈上的锁管理对象通过构造和析构管理。</p>
<h3 id="std-mutex-示例"><code>std::mutex</code> 示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; g_pages;</span><br><span class="line"><span class="built_in">std</span>::mutex g_pages_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_page</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 模拟长页面读取</span></span><br><span class="line">    <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> result = <span class="string">"fake content"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// save_page 结束后 mutex 释放</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">guard</span><span class="params">(g_pages_mutex)</span></span>;</span><br><span class="line">    g_pages[url] = result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// t1 t2 依次将网页内容填入 map 中</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t1</span><span class="params">(save_page, <span class="string">"http://foo"</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t2</span><span class="params">(save_page, <span class="string">"http://bar"</span>)</span></span>;</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 现在访问 g_pages 是安全的，因为 t1 t2 生命周期已结束</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;pair : g_pages) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; pair.first &lt;&lt; <span class="string">" =&gt; "</span> &lt;&lt; pair.second &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="std-timed-mutex">std::timed_mutex</h2>
<h3 id="std-timed-mutex-特性"><code>std::timed_mutex</code> 特性</h3>
<p><code>timed_mutex</code> 在 <code>mutex</code> 的基础上新增了一些功能，添加了两个成员函数 <code>try_lock_for</code> 和 <code>try_lock_until</code>。</p>
<p><code>try_lock_for</code> 在尝试获取锁的过程中会阻塞一段时间，如果在这段时间都没有获取到锁就返回 <code>false</code>，而 <code>try_lock_until</code> 则会阻塞到指定时间，除非在这个过程中获得了锁。</p>
<h3 id="std-timed-mutex-示例"><code>std::timed_mutex</code> 示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制到 std::cout 的访问</span></span><br><span class="line"><span class="built_in">std</span>::mutex cout_mutex;</span><br><span class="line"><span class="built_in">std</span>::timed_mutex mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">job</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> Ms = <span class="built_in">std</span>::chrono::milliseconds;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">ostringstream</span> stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个线程都尝试 3 次获取 timed_mutex</span></span><br><span class="line">    <span class="comment">// 成功了打印 success 并 sleep 100Ms</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mutex.try_lock_for(Ms(<span class="number">100</span>))) &#123;</span><br><span class="line">            stream &lt;&lt; <span class="string">"success "</span>;</span><br><span class="line">            <span class="built_in">std</span>::this_thread::sleep_for(Ms(<span class="number">100</span>));</span><br><span class="line">            mutex.unlock();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stream &lt;&lt; <span class="string">"failed "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::this_thread::sleep_for(Ms(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印输出时也需要获取 mutex</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(cout_mutex)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; id &lt;&lt; <span class="string">"] "</span> &lt;&lt; stream.str() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::thread&gt; threads;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="comment">// explicit thread(Function&amp;&amp; f, Args&amp;&amp;... args)</span></span><br><span class="line">        <span class="comment">// 值传递构造线程并启动</span></span><br><span class="line">        threads.emplace_back(job, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i: threads) &#123;</span><br><span class="line">        i.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::timed_mutex test_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> now = <span class="built_in">std</span>::chrono::steady_clock::now();</span><br><span class="line">    <span class="comment">// 填入要阻塞到的最大时间点</span></span><br><span class="line">    test_mutex.try_lock_until(now + <span class="built_in">std</span>::chrono::seconds(<span class="number">10</span>));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 主线程已经获得了 time_mutex，thread t 只能阻塞 10S</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::timed_mutex&gt; <span class="title">l</span><span class="params">(test_mutex)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(f)</span></span>;</span><br><span class="line">    t.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="std-recursive-mutex">std::recursive_mutex</h2>
<h3 id="std-recursive-mutex-特性"><code>std::recursive_mutex</code> 特性</h3>
<p><code>recursive_mutex</code> 又被称为递归互斥器，它与 <code>non-recursive mutex</code> 的区别在于拥有锁的线程再次 <code>lock</code> 时不会出现未定义行为，而是记入加锁次数中，<code>unlock</code> 时必须匹配到 <code>lock</code> 的次数才能成功解锁。</p>
<p>对 <code>recursive_mutex</code> 加锁的最大次数是未知的，达到最大次数时继续 <code>lock</code> 会抛出 <code>std::system_error</code>。</p>
<p>部分场合下，<code>recursive_mutex</code> 会掩盖代码的一些问题，比如下面的情形中，当 <code>doit</code> 不小心间接调用到了 <code>post</code>，<code>mutex</code> 有可能会死锁，而 <code>recursive_mutex</code> 会偶尔 <code>crash</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::mutex mutex;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Foo&gt; foos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">post</span><span class="params">(<span class="keyword">const</span> Foo&amp; f)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">    foos.push_back(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = foos.<span class="built_in">begin</span>(); it != foos.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        it-&gt;doit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="std-recursive-mutex-示例"><code>std::recursive_mutex</code> 示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::recursive_mutex test;</span><br><span class="line">    <span class="comment">// 尝试锁定并解锁</span></span><br><span class="line">    <span class="keyword">if</span> (test.try_lock()) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"lock acquired"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        test.unlock();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"lock not acquired"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再次锁定</span></span><br><span class="line">    test.lock();</span><br><span class="line">    <span class="comment">// 再次锁定仍然能够成功</span></span><br><span class="line">    <span class="keyword">if</span> (test.try_lock()) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"lock acquired"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"lock not acquired"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    test.unlock();</span><br><span class="line">    <span class="comment">//test.unlock();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="std-recursive-timed-mutex">std::recursive_timed_mutex</h2>
<h3 id="std-recursive-timed-mutex-特性"><code>std::recursive_timed_mutex</code> 特性</h3>
<p><code>recursive_timed_mutex</code> 是 <code>recursive_mutex</code> 和 <code>timed_mutex</code> 的合体，特性与示例均参照以上。</p>
<h2 id="std-shared-mutex">std::shared_mutex</h2>
<h3 id="std-shared-mutex-特性"><code>std::shared_mutex</code> 特性</h3>
<p><code>shared_mutex</code> 是 C++17 中引入的新特性。它拥有两个访问级别：<br>
多个线程能够共享同一个 <code>shared_mutex</code> 的所有权；<br>
仅一个线程能获得 <code>shared_mutex</code> 的所有权。</p>
<p><code>shared_mutex</code> 即有排他锁定的成员函数 <code>lock</code>、<code>try_lock</code>、<code>unlock</code>，又有共享锁定的成员函数 <code>lock_shared</code>、<code>try_lock_shared</code>、<code>unlock_shared</code>。</p>
<p><code>shared_mutex</code> 本质是 <code>rwlock</code>，基本规则可以总结为<strong>写优先、读共享、交叉互斥</strong>，之所以写优先是因为能够保证读到数据是最新的。</p>
<p>当 <code>shared_mutex</code> 当前是写加锁时，所有尝试 <code>lock</code> 的线程都会阻塞；<br>
当 <code>shared_mutex</code> 当前是读加锁时，所有尝试以读模式 <code>lock</code> 的线程能够获得访问权，以写模式 <code>lock</code> 的线程会被阻塞；<br>
当 <code>shared_mutex</code> 读加锁时有其它线程尝试以写模式 <code>lock</code> 时，<code>shared_mutex</code> 会阻塞后面的读模式，直到写模式结束释放锁。</p>
<p>如果是自己实现读写锁的时候可能存在这样的问题，<strong>通常 <code>reader lock</code> 是可重入的，而 <code>writer lock</code> 是不可重入的，那么 <code>reader lock</code> 重入的时候可能会造成死锁</strong>。</p>
<h3 id="std-shared-mutex-示例"><code>std::shared_mutex</code> 示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;shared_mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeCounter</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ThreadSafeCounter() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读的时候使用共享锁</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::shared_lock&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> value_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写的时候使用独占锁</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        value_++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重置的时候使用独占锁</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::shared_mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">        value_ = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// get const 中需要加锁，因此 mutex_ 需要定义为 mutable</span></span><br><span class="line">    <span class="keyword">mutable</span> <span class="built_in">std</span>::shared_mutex mutex_;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> value_ = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThreadSafeCounter counter;</span><br><span class="line">    <span class="built_in">std</span>::mutex printMutex;</span><br><span class="line">    <span class="keyword">auto</span> increment_and_print = [&amp;counter, &amp;printMutex]() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            counter.increment();</span><br><span class="line">            <span class="comment">// 写入 std::cout 实际上也要由另一互斥同步</span></span><br><span class="line">            <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(printMutex)</span></span>;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::this_thread::get_id() &lt;&lt; <span class="string">' '</span> &lt;&lt; counter.<span class="built_in">get</span>() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">thread1</span><span class="params">(increment_and_print)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">thread2</span><span class="params">(increment_and_print)</span></span>;</span><br><span class="line"></span><br><span class="line">    thread1.join();</span><br><span class="line">    thread2.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="std-shared-timed-mutex">std::shared_timed_mutex</h2>
<h3 id="std-shared-timed-mutex-特性"><code>std::shared_timed_mutex</code> 特性</h3>
<p><code>shared_timed_mutex</code> 是 <code>shared_mutex</code> 与 <code>timed_mutex</code> 的合体：<br>
排他锁定成员函数 <code>lock</code>、<code>try_lock</code>、<code>try_lock_for</code>、<code>try_lock_until</code>、<code>unlock</code>；<br>
共享锁定成员函数 <code>lock_shared</code>、<code>try_lock_shared</code>、<code>try_lock_shared_for</code>、<code>try_lock_shared_until</code>、<code>unlock_shared</code>。</p>
]]></content>
      <categories>
        <category>MultiThreading</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>MultiThreading</tag>
        <tag>Inter-Threading-Communication</tag>
        <tag>Mutex</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 和 Java：区别到底在哪里</title>
    <url>/posts/54e19ff4/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>从语言特性上来说，主要是变量语义与编程范式的区别</li>
<li>从编码方式上来说，它们申请对象的方式、资源管理、错误处理都不太相同</li>
<li>从编译运行上来说，它们编译运行的方式、对外暴露接口的方式、引用外部类的方式也不一样</li>
</ul>
</blockquote>
<a id="more"></a>
<p>在做 C/C++ 开发的时候也会经常接触到 Java 相关的代码与知识，下面总结一下它们两者之间的区别：</p>
<h2 id="变量语义的区别">变量语义的区别</h2>
<p>C++ 中所有的变量缺省都是值语义，如果不使用指针或者引用，变量不会引用一个堆上的对象。<br>
值语义的生命周期管理简单，因为它们都是 <em>stack object</em>，但是通过指针或引用来操作堆上对象的时候，C++ 就需要考虑所指对象是否成功释放。<strong>智能指针能够将引用语义转化为值语义来解决上述对象生命周期的问题</strong>。由于 <em>memory locality</em>，C++ 的值语义在性能上具有极大的优势。<br>
Java 中大部分变量则是引用语义，栈空间的变量都是引用类型，因此如果发生拷贝都是浅拷贝。</p>
<h2 id="编程范式的区别">编程范式的区别</h2>
<p>C++ 是一门多范式的编程语言，支持面向过程编程、面向对象编程、泛型编程、函数式编程，开发灵活性高。<br>
Java 支持面向对象编程，或许还有泛型？</p>
<h2 id="申请对象方式的区别">申请对象方式的区别</h2>
<p>变量语义的区别带来了申请对象方式的区别。<br>
C++ 可以自由控制对象是在堆上分配还是在栈上分配，堆上分配时间不确定，而栈上分配速度极快。<br>
Java 提倡所有对象都在堆上分配（原生类型也有对应的封装类），由 GC 统一管理对象生命周期。</p>
<h2 id="资源管理方式的区别">资源管理方式的区别</h2>
<p>C++ 没有垃圾回收机制，因此 C++ 在堆上开辟了一段新空间存放数据之后还需要手动释放空间。<br>
对于一些生命周期模糊的对象，C++11 之后使用了改进版的智能指针来管理 new 出来的对象，释放对象的任务交给智能指针自动完成，整个过程使用的是 RAII 技术，感兴趣的朋友可以参考上一篇智能指针的文章。<br>
Java 中有垃圾回收机制，堆中申请的空间 GC 会自动回收，而 Java 没有析构函数，也几乎很少用 RAII 来管理资源。</p>
<h2 id="错误处理方式的区别">错误处理方式的区别</h2>
<p>C++ 出于历史原因（Google 编码风格）或是性能原因（异常抛出导致系统实时性受损）可以不使用异常，因为如果使用异常，代码中可能出现大量的 <code>try{...}catch{...}</code> 语句，代码将会变得冗长难读，而且<strong>在泛型编程的代码中我们甚至不知道可能会出现哪些异常</strong>。<br>
所以 <strong>从 C++17 开始，对异常的处理标准变成了我们只能声明某些函数不能抛出异常</strong>。在运行之前，无论是代码声明还是编译器都不能发现异常。<br>
Java 中如果一个函数抛出异常，则强制它的调用方必须要处理异常。</p>
<h2 id="对外暴露接口的区别">对外暴露接口的区别</h2>
<p>C++ 除了<strong>模板类需要将接口和实现都放在头文件中</strong>，其他情况下都是<strong>头文件提供对外接口，源文件实现对外接口</strong>。<br>
Java 主要是通过继承和多态来实现自定义接口。</p>
<h2 id="引用外部类与依赖关系的区别">引用外部类与依赖关系的区别</h2>
<p>C++ 的头文件机制会引入大量不相关的代码依赖，编译过程中经常出现某个依赖的头文件不匹配，但是却找不到是如何使用这个头文件的，同样的，链接时也会出现库版本不对或者库的编译参数不匹配等错误。<br>
Java 的 import 机制以及 package 机制能够很好地解决上面的问题，用到哪个类就 import 哪个类，用到的库文件也能够编译成一个 .jar 包用于外部 import，简单高效。</p>
<h2 id="编译运行方式的区别">编译运行方式的区别</h2>
<p>C++ 先将代码编译成二进制文件，这个二进制文件是和平台有关的，所以常说 <strong>C++ 不是跨平台的</strong>，操作系统将这个二进制文件读入内存执行。<br>
Java 是将源文件 .java 编译成 .class 字节码，再<strong>通过 Jvm 将字节码载入内存中翻译执行</strong>。所以 Java 的跨平台是通过与平台无关的字节码实现的。<br>
因为 Jvm 加载字节码后是一边翻译一边执行的，执行效率会略低于 C++，但是在硬件成本极低的现在执行效率的差异已经被拉到很低了。</p>
<p>以上，Java 与 C++ 相比，社区更加活跃，工具也更加丰富，开源库也多，难怪在讲究速度与效率的互联网行业如此受欢迎。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Programming-Language</tag>
      </tags>
  </entry>
  <entry>
    <title>从 RAII 到 smartPtr：智能指针剖析</title>
    <url>/posts/3a3d14bc/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>介绍了 RAII 的基本概念</li>
<li>介绍了智能指针的基本概念</li>
<li>实现了 auto_ptr / unique_ptr / shared_ptr</li>
<li>介绍了智能指针的 Deleter 与多线程下的应用</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="RAII-的基本概念">RAII 的基本概念</h2>
<h3 id="什么是堆">什么是堆</h3>
<p>在内存管理的范畴中，我们将程序中能够动态分配内存的区域称为堆 - <em>heap</em>，C/C++ 都提供了操作 <em>heap</em> 的函数或运算符：</p>
<ul>
<li>
<p>C 使用 <code>malloc/free</code> 操作 <em>heap</em></p>
</li>
<li>
<p>C++ 使用 <code>new/delete</code> 操作 <em>heap</em></p>
</li>
</ul>
<p>类似于下面的代码就会在堆上分配内存：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> vecPtr = <span class="keyword">new</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</span><br></pre></td></tr></table></figure>
<p>在堆上分配了内存之后的另一个问题就是释放内存，和 Java 的垃圾收集机制不同，C++ 的内存分配和释放都由内存管理器来操作，通常都不使用垃圾收集，我们需要做的只是把 <code>new</code> 出来的内存再通过 <code>delete</code> 释放掉即可，但是事实上真的这么简单吗？</p>
<h3 id="什么是栈">什么是栈</h3>
<p>函数在运行过程中调用数据、生成数据时使用的内存区域称为栈 - <em>stack</em>，它和数据结构中的栈类似，都是 LIFO。以 x86 为例，<strong>栈的增长方向是由高地址向低地址增长</strong>，函数之间调用时，调用函数会将自己的参数压入栈中，同时把自己下一行的指令也压入栈中，再跳转到新的函数并调整栈指针，新的函数在执行完之后会根据栈中保存的调用函数的地址<strong>重新回到调用函数未执行的地方继续执行</strong>。</p>
<p>由此可见，栈上空间的分配和释放逻辑都十分简单，只要移动栈指针即可，具体分配空间的时候，每个函数分到的属于自己的那一份称为栈帧 - <em>stack frame</em>，即使是有构造函数和析构函数的情况下，C++ 的编译器也会在栈帧的适当位置添加对构造函数和析构函数的调用。这个过程中，<strong>就算函数抛出了异常，编译器也会自动调用析构函数</strong>，来看一个例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Obj()&#123; <span class="built_in">puts</span>(<span class="string">"Obj()"</span>); &#125;</span><br><span class="line">    ~Obj()&#123; <span class="built_in">puts</span>(<span class="string">"~Obj()"</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    Obj obj;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"func error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        func(<span class="number">0</span>);</span><br><span class="line">        func(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="keyword">const</span> <span class="keyword">char</span>* str)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">    Obj()</span><br><span class="line">    ~Obj()</span><br><span class="line">    Obj()</span><br><span class="line">    ~Obj()</span><br><span class="line">    func error</span><br></pre></td></tr></table></figure>
<p>也就是说，<code>func(1)</code> 在将异常抛出之前就已经调用了自身的析构函数，而这点正是 RAII 的基础，也是最重要的部分。</p>
<h3 id="什么是-RAII">什么是 RAII</h3>
<p>RAII - <em>Resource Acquisition Is Initialization</em>，资源获取即初始化，<strong>RAII 是一种资源管理方式，它通过栈和析构函数来管理包括堆在内的所有资源</strong>，主流的编程语言中只有 C++ 是使用 RAII 来管理资源的，下面来看一个 C++ 工厂方法的简单示例，为了防止发生对象切片的错误（<strong>C++ 的值语义特点所带来的的编码陷阱：函数返回类型为父类对象，实际返回的为子类对象</strong>），工厂方法需要返回一个父类对象的指针或者是引用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++11 后建议使用强类型枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">animalType</span> &#123;</span></span><br><span class="line">    cat,</span><br><span class="line">    dog,</span><br><span class="line">    fox,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span> &#123;</span>...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span> :</span> <span class="keyword">public</span> animal &#123;...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span> :</span> <span class="keyword">public</span> animal &#123;...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fox</span> :</span> <span class="keyword">public</span> animal &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">animal* <span class="title">buyNewAnimal</span><span class="params">(animalType ani_type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(ani_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> animalType::cat :</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> cat();</span><br><span class="line">        <span class="keyword">case</span> animalType::dog :</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> dog();</span><br><span class="line">        <span class="keyword">case</span> animalType::fox :</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> fox();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时返回的是一个 <code>animal</code> 类型的父类指针，指向的是子类对象，问题来了，<code>buyNewAnimal</code> 函数返回 <code>animal</code> 指针后便退出了，堆上已经开辟出空间 <code>animal</code> 子类的对应空间，如何才能保证这一部分内存不泄漏？</p>
<h2 id="智能指针的基本概念">智能指针的基本概念</h2>
<p>C 和 C++ 的老程序员都曾大量接触过裸指针，都曾一边享受着指针带来的便利一边不停地给自己挖坑埋坑，在介绍智能指针之前，先看看使用指针的时候常见的坑有哪些：</p>
<ul>
<li>
<p>忘记 <code>delete/free</code> 导致内存泄露</p>
</li>
<li>
<p>同一个指针释放多次，程序崩溃</p>
</li>
<li>
<p>逻辑 bug，写了 <code>delete/free</code> 结果没有执行到</p>
</li>
<li>
<p><code>delete/free</code> 之前抛出了异常</p>
</li>
</ul>
<p>前面已经介绍过了，C++ 没有自动内存回收机制，<code>new</code> 出来的必须要自己 <code>delete</code> 掉，智能指针的引入，让程序员可以不再关注资源的释放，它能够保证程序无论正常或异常，在到期的时候都能通过 RAII 机制成功回收。</p>
<p>来看上一节中 <code>buyNewAnimal</code> 函数返回的 <code>animal</code> 指针，<strong>只需要将这个返回值放入一个本地变量中，确保这个变量析构的时候会删除上面的对象</strong>即可：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">smartAnimalPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">smartAnimalPtr</span><span class="params">(animal* animalPtr)</span> : <span class="title">animalPtr_</span><span class="params">(animalPtr)</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">// delete nullptr is legal operation</span></span><br><span class="line">    ~smartAnimalPtr()&#123;</span><br><span class="line">        <span class="keyword">delete</span> animalPtr_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">animal* <span class="title">getPtr</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> animalPtr_;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    animal* animalPtr_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">smartAnimalPtr <span class="title">newAnimalPtr</span><span class="params">(buyNewAnimal(dog))</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>func</code> 调用的 <code>buyNewAnimal</code> 函数返回值被 <code>newAnimalPtr</code> 接管，使用者可以直接调用 <code>newAnimalPtr.getPtr()</code> 使用原指针，当 <code>func</code> 函数结束时，<code>newAnimalPtr</code> 析构，<code>animalPtr_</code> 所指向的区域被释放，整个过程不需要手动调用 <code>delete</code>，而是通过 RAII 巧妙地交给编译器处理了。</p>
<p>除了 <code>delete</code> 之外，在本地变量的析构函数中还可以执行以下操作：</p>
<ul>
<li>释放同步锁，如下面的多线程累加范例：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::mutex sum_lock;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>&amp; sum, <span class="keyword">int</span>&amp; num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">// 结束一轮 while 后 sum_lock 自动释放</span></span><br><span class="line">        <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(sum_lock)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            num += <span class="number">1</span>;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::thread&gt; tdVec;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)&#123;</span><br><span class="line">        <span class="built_in">std</span>::thread td = <span class="built_in">std</span>::thread(add, <span class="built_in">std</span>::ref(sum), <span class="built_in">std</span>::ref(num));</span><br><span class="line">        tdVec.emplace_back(<span class="built_in">std</span>::<span class="built_in">move</span>(td));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// std::mem_fn can generate an object for pointers to members as well as ref and pointers to an object</span></span><br><span class="line">    <span class="built_in">std</span>::for_each(tdVec.<span class="built_in">begin</span>(), tdVec.<span class="built_in">end</span>(), <span class="built_in">std</span>::mem_fn(&amp;<span class="built_in">std</span>::thread::join));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>关闭文件，如 <code>fstream</code> 析构时会调用 <code>close</code> 以防止流对象销毁后还与打开的文件相关联</li>
</ul>
<p>上面实现的 <code>smartAnimalPtr</code> 已经可以算是一个简单的智能指针啦。</p>
<h2 id="auto-ptr">auto_ptr</h2>
<p>我们将 <code>smartAnimalPtr</code> 模板化，并添加一些常用的指针操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">smartAutoPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">smartAutoPtr</span><span class="params">(T* ptr)</span> : <span class="title">ptr_</span><span class="params">(ptr)</span> </span>&#123;&#125;</span><br><span class="line">    ~smartAutoPtr() &#123; <span class="keyword">delete</span> ptr_; &#125;</span><br><span class="line">    <span class="function">T* <span class="title">getPtr</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *ptr_; &#125;</span><br><span class="line">    <span class="comment">// 重载 bool 转换运算符</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* ptr_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上面的代码存在一个很严重的问题，当 <code>smartAutoPtr</code> 拷贝构造或者被赋值时，<strong>因为有两个指针指向同一片区域，RAII 会让这片区域释放两次</strong>！解决这个问题的第一种方法、也是最简单的方法是禁用这两个函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">smartAutoPtr(<span class="keyword">const</span> smartAutoPtr&lt;T&gt;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">smartAutoPtr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> smartAutoPtr&lt;T&gt;&amp;) = <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure>
<p>第二种方法，我们可以在拷贝构造和赋值时转移指针的所有权，而这也正是 <code>auto_ptr</code> 的处理方式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">smartAutoPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">smartAutoPtr</span><span class="params">(T* ptr)</span> : <span class="title">ptr_</span><span class="params">(ptr)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    smartAutoPtr(<span class="keyword">const</span> smartAutoPtr&amp; _Right) &#123;</span><br><span class="line">        ptr_ = _Right.<span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy and swap</span></span><br><span class="line">    <span class="comment">// _Right --&gt; smartAutoPtr(_Right) --&gt; _New</span></span><br><span class="line">    smartAutoPtr&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> smartAutoPtr&amp; _Right) &#123;</span><br><span class="line">        smartAutoPtr(_Right).reset(*<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~smartAutoPtr() &#123; <span class="keyword">delete</span> ptr_; &#125;</span><br><span class="line">    <span class="function">T* <span class="title">getPtr</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *ptr_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 剥夺原 smartAutoPtr 对指针的所有权给新 smartAutoPtr</span></span><br><span class="line">    <span class="function">T* <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T* _Tmp = ptr_;</span><br><span class="line">        ptr_ = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> _Tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(smartAutoPtr&amp; _New)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">        swap(ptr_, _New.ptr_);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* ptr_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>赋值运算符的重载利用了 <em>copy and swap</em> 技术，即先通过拷贝构造创建一个新的对象，再交换它们的指针，这样能够保证强安全性，构造是否成功完全不会破坏赋值运算符两边的数据。</p>
<p>由上面的代码不难看出，<code>auto_ptr</code> 在拷贝构造和赋值运算时都会完全剥夺原对象对指针的所有权，也就是说除了最后一个 <code>auto_ptr</code>，其余所有的 <code>auto_ptr</code> 都变成了 <code>nullptr</code>，全部失效了，这样会带来几个问题：</p>
<ul>
<li>
<p><strong>STL 对容器类型的要求是要有值语义，即可以复制和赋值</strong>。<code>auto_ptr</code> 的复制和赋值经过了 <code>release</code> 和 <code>reset</code> 的处理，<strong>因此 <code>auto_ptr</code> 对象不能作为 STL 的容器元素</strong>。</p>
</li>
<li>
<p>将 <code>auto_ptr</code> 作为函数参数按值传递时，函数会在其作用域中生成该 <code>auto_ptr</code> 的拷贝，此时的指针所有权已经转移给了这个临时对象，当函数退出时，该临时对象析构，原 <code>auto_ptr</code> 所指向的对象也被删除了，<strong>如果不得不使用 <code>auto_ptr</code> 作为函数参数时，最好使用 <code>const auto_ptr&amp;</code> 的方式</strong>。</p>
</li>
</ul>
<p>值得注意的是，<code>auto_ptr</code> 已经从 C++17 标准中删除了。</p>
<h2 id="unique-ptr">unique_ptr</h2>
<p><code>unique_ptr</code> 与 <code>auto_ptr</code> 在特性上相差不大，<strong>同一时刻只能有唯一的一个 <code>unique_ptr</code> 指向给定的对象</strong>，<code>unique_ptr</code> 在处理智能指针拷贝构造和赋值时发生的浅拷贝问题上采用了 <code>smartAutoPtr</code> 所使用的方法一，即直接将拷贝构造和赋值运算禁用，此外，<code>unique_ptr</code> 还引入了移动构造，在 C<ins>11 之前，如果想要将源对象的状态转移到目标对象只能通过拷贝构造，C</ins>11 开始，我们不再需要复制对象，只需要移动对象即可，也就是把源对象的资源控制权转交给目标对象，这个过程中不再需要多余的复制操作。我们将上面的 <code>auto_ptr</code> 稍微修改可以得到一个简化版的 <code>unique_ptr</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">smartUniquePtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">smartUniquePtr</span><span class="params">(T* ptr)</span> : <span class="title">ptr_</span><span class="params">(ptr)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动构造函数不会在类中默认生成</span></span><br><span class="line">    smartUniquePtr(smartUniquePtr&amp;&amp; _Right) &#123;</span><br><span class="line">        ptr_ = _Right.<span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换移动构造</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    smartUniquePtr(smartUniquePtr&lt;U&gt;&amp;&amp; _Right) &#123;</span><br><span class="line">        ptr_ = _Right.<span class="built_in">release</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// necessary</span></span><br><span class="line">    smartUniquePtr(<span class="keyword">const</span> smartUniquePtr&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    smartUniquePtr(<span class="keyword">const</span> smartUniquePtr&lt;U&gt;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// new _Right --&gt; *this</span></span><br><span class="line">    smartUniquePtr&amp; <span class="keyword">operator</span>=(smartUniquePtr _Right) &#123;</span><br><span class="line">        _Right.reset(*<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~smartUniquePtr() &#123; <span class="keyword">delete</span> ptr_; &#125;</span><br><span class="line">    <span class="function">T* <span class="title">getPtr</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *ptr_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T* <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T* _Tmp = ptr_;</span><br><span class="line">        ptr_ = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> _Tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(smartUniquePtr&amp; _New)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">        swap(ptr_, _New.ptr_);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* ptr_&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上面的代码需要注意，<strong>在定义了移动构造函数的情况下，如果没有提供拷贝构造函数，会自动禁用拷贝构造函数</strong>。<br>
但是，<strong>编译器并不会把 <code>smartUniquePtr(smartUniquePtr&lt;U&gt;&amp;&amp; _Right) {}</code> 看作是移动构造，换句话说，编译器不会把所有的模板函数看作构造函数</strong>，如果想消除代码重复，仍然需要将拷贝构造函数手动禁用。<br>
再看 <code>smartUniquePtr</code> 的使用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// buyNewAnimal 返回的是一个临时变量，调用移动构造函数</span></span><br><span class="line">smartUniquePtr&lt;animal&gt; ptr1&#123; buyNewAnimal(animalType::dog) &#125;;</span><br><span class="line">smartUniquePtr&lt;animal&gt; ptr2&#123; <span class="literal">nullptr</span> &#125;;</span><br><span class="line"><span class="comment">// ptr1 是一个左值，需要转换成右值</span></span><br><span class="line"><span class="comment">// ptr1 --&gt; temp rv obj --&gt; ptr3</span></span><br><span class="line">smartUniquePtr&lt;animal&gt; ptr3 = <span class="built_in">std</span>::<span class="built_in">move</span>(ptr1);</span><br><span class="line">smartUniquePtr&lt;animal&gt; ptr4&#123; <span class="built_in">std</span>::<span class="built_in">move</span>(ptr3) &#125;;</span><br></pre></td></tr></table></figure>
<p><code>unique_ptr</code> 除了能够支持管理堆上分配的内存，还能够通过移动语义使 <code>unique_ptr</code> 对象与容器兼容。<br>
但 <code>unique_ptr</code> 仍然有一些不足，它仍然无法避免重复释放的问题，使用移动语义之后的源对象也仍然失去了对原指针的所有权，无法再次使用。<br>
要避免上述这些情况，最好的办法是使用带有引用计数功能的智能指针。</p>
<h2 id="shared-ptr">shared_ptr</h2>
<p>在 <code>unique_ptr</code> 中，一个对象只能被一个 <code>unique_ptr</code> 拥有，这在大部分场合是无法满足要求的，更常见的是多个智能指针同时拥有一个对象，只有当所有的指针都失效了，才会删除该对象，这样的智能指针就是 <code>shared_ptr</code>。<br>
<code>shared_ptr</code> 的底层通过引用计数来进行空间管理，每当有一个新的指针指向这块空间时，引用计数加一，反之减一，直到引用计数为零时才释放空间。<br>
来看一下 <code>shared_ptr</code> 的简单实现，和 <code>unique_ptr</code> 的不同之处在于它需要实现共享的引用计数，因此我们<strong>在堆上 <code>new</code> 一个 <code>ref_count</code> 出来，并在 <code>shared_ptr</code> 中保存指向它的指针</strong>，完整的操作需要包含 <code>add</code>、<code>reduce</code> 和 <code>get</code> 三种行为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ref_count</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ref_count() <span class="keyword">noexcept</span> : cnt_(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123; ++cnt_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">reduce</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> --cnt_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> cnt_; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">long</span> cnt_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">smartSharedPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">smartSharedPtr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">smartSharedPtr</span><span class="params">(T* ptr = <span class="literal">nullptr</span>)</span> : <span class="title">ptr_</span><span class="params">(ptr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ptr_) &#123;</span><br><span class="line">            refptr_ = <span class="keyword">new</span> ref_count();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy constructor ref_count add</span></span><br><span class="line">    smartSharedPtr(<span class="keyword">const</span> smartShared&amp; _Right) &#123;</span><br><span class="line">        ptr_ = _Right.ptr_;</span><br><span class="line">        <span class="keyword">if</span> (ptr_) &#123;</span><br><span class="line">            _Right.refptr_-&gt;add();</span><br><span class="line">            refptr_ = _Right.refptr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// template copy constructor</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    smartSharedPtr(<span class="keyword">const</span> smartSharedPtr&lt;U&gt;&amp; _Right) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        ptr_ = _Right.ptr_;</span><br><span class="line">        <span class="keyword">if</span> (ptr_) &#123;</span><br><span class="line">            _Right.refptr_-&gt;add();</span><br><span class="line">            refptr_ = _Right.refptr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// template move constructor</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    smartSharedPtr(smartSharedPtr&lt;U&gt;&amp;&amp; _Right) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        ptr_ = _Right.ptr_;</span><br><span class="line">        <span class="keyword">if</span> (ptr_) &#123;</span><br><span class="line">            refptr_ = _Right.refptr_;</span><br><span class="line">            _Right.ptr_ = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overload assignment operator</span></span><br><span class="line">    smartSharedPtr&amp; <span class="keyword">operator</span>=(smartSharedPtr _Right) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        _Right.swap(*<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~smartSharedPtr() &#123;</span><br><span class="line">        <span class="comment">// 每次析构时都需要将 ref_count 减一</span></span><br><span class="line">        <span class="keyword">if</span> (ptr_ &amp;&amp; !refptr_-&gt;reduce()) &#123;</span><br><span class="line">            <span class="keyword">delete</span> ptr_;</span><br><span class="line">            <span class="keyword">delete</span> ref_count_;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get ref_count</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getRefCnt</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ptr_) &#123;</span><br><span class="line">            <span class="keyword">return</span> refptr_-&gt;<span class="built_in">get</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T* <span class="title">getptr</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> <span class="keyword">noexcept</span> &#123; <span class="keyword">return</span> *ptr_; &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> <span class="keyword">noexcept</span> &#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(smartSharedPtr&amp; _New)</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">        swap(ptr_, _New.ptr_);</span><br><span class="line">        swap(refptr_, _New.refptr_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* ptr_;</span><br><span class="line">    ref_count* refptr_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(smartSharedPtr&lt;T&gt;&amp; _Left, smartSharedPtr&lt;T&gt;&amp; _Right)</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">    _Left.swap(_Right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，需要注意以下几点：</p>
<ul>
<li>
<p>为了让编译器优化代码，需要为移动构造函数添加 <code>noexcept</code> 声明</p>
</li>
<li>
<p><code>refptr_</code> 为每个类的私有成员，是不能在 <code>smartSharedPtr</code> 对象之间共享的，需要添加友元类的声明</p>
</li>
<li>
<p>按照现代 C++ 标准需要设计支持移动的对象，即对象不仅要有 <code>swap</code> 成员函数与另一个对象交换，在其所属名空间下还需要需要有一个全局 <code>swap</code> 函数提供给其他对象使用</p>
</li>
<li>
<p>智能指针还需要实现类型转换的函数模板，这里给出 <code>dynamic_cast</code>，其他实现与此类似：</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for pointer type conversion</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">smartSharedPtr(<span class="keyword">const</span> smartSharedPtr&lt;U&gt;&amp; _Right, T* ptr) &#123;</span><br><span class="line">    ptr_ = ptr;</span><br><span class="line">    <span class="keyword">if</span> (ptr_) &#123;</span><br><span class="line">        _Right.refptr_-&gt;add();</span><br><span class="line">        refptr_ = _Right.refptr_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出 _Right 的 ptr_ 转换成 T 类型后将 ref_count++ 并包装返回</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">smartSharedPtr&lt;T&gt; <span class="title">dynamic_pointer_cast</span><span class="params">(<span class="keyword">const</span> smartSharedPtr&lt;U&gt;&amp; _Right)</span> </span>&#123;</span><br><span class="line">    T* _Tmp = <span class="keyword">dynamic_cast</span>&lt;T*&gt;(_Right.getptr());</span><br><span class="line">    <span class="keyword">return</span> smartSharedPtr&lt;T&gt;(_Right, _Tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="weak-ptr">weak_ptr</h2>
<p><code>shared_ptr</code> 通常被称为强智能指针，而 <code>weak_ptr</code> 被称为弱智能指针，介绍 <code>weak_ptr</code> 之前先看下面的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A () &#123;&#125;</span><br><span class="line">    ~A () &#123;&#125;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;B&gt; ptrb;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B () &#123;&#125;</span><br><span class="line">    ~B () &#123;&#125;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;A&gt; ptra;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ref_count of A is 1</span></span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line">    <span class="comment">// ref_count of B is 1</span></span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line">    <span class="comment">// ref_count of B is 2</span></span><br><span class="line">    ptra-&gt;ptrb = ptrb;</span><br><span class="line">    <span class="comment">// ref_count of A is 2</span></span><br><span class="line">    ptrb-&gt;ptra = ptra;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ptra.use_count() &lt;&lt; ptrb.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>main</code> 结束时，两个对象的引用计数分别减到 1，因为不等于 0，不满足对象的空间释放条件，最终导致内存泄露，这个问题被称为 <code>shared_ptr</code> 的循环引用问题。</p>
<p>那么怎么解决这个问题呢？当然是通过 <code>weak_ptr</code>，<code>weak_ptr</code> 对 <code>shared_ptr</code> 管理的对象存在非拥有性引用，换句话说，<strong>它表达的是一种临时所有权 - 如果某个对象只有存在的时候才需要被访问，而且随时可能会被删除导致指针失效时，就使用 <code>weak_ptr</code> 跟踪该对象</strong>，当 <code>weak_ptr</code> 需要使用该对象时，需要将其升级为 <code>shared_ptr</code>，如果原 <code>shared_ptr</code> 销毁，这个对象的生命周期则会延长到这个升级的 <code>shared_ptr</code> 被销毁为止。</p>
<p><code>weak_ptr</code> 的特点可以总结为下面几点：</p>
<ul>
<li>
<p><code>weak_ptr</code> 中没有提供一般的指针操作，如果要访问资源必须通过 <code>lock</code> 将其升级为 <code>shared_ptr</code></p>
</li>
<li>
<p><strong>定义对象的时候使用 <code>shared_ptr</code> ，引用对象的时候使用 <code>weak_ptr</code></strong></p>
</li>
<li>
<p><code>weak_ptr</code> 不会改变对象的引用计数，它只是一个观察者的角色</p>
</li>
</ul>
<p>上面的代码使用 <code>weak_ptr</code> 可以修改为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A () &#123;&#125;</span><br><span class="line">    ~A () &#123;&#125;</span><br><span class="line">    weak_ptr&lt;B&gt; ptrb;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B () &#123;&#125;</span><br><span class="line">    ~B () &#123;&#125;</span><br><span class="line">    weak_ptr&lt;A&gt; ptra;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ref_count of A is 1</span></span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;A&gt; <span class="title">ptra</span><span class="params">(<span class="keyword">new</span> A())</span></span>;</span><br><span class="line">    <span class="comment">// ref_count of B is 1</span></span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;B&gt; <span class="title">ptrb</span><span class="params">(<span class="keyword">new</span> B())</span></span>;</span><br><span class="line">    <span class="comment">// ref_count of B is 1</span></span><br><span class="line">    ptra-&gt;ptrb = ptrb;</span><br><span class="line">    <span class="comment">// ref_count of A is 1</span></span><br><span class="line">    ptrb-&gt;ptra = ptra;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ptra.use_count() &lt;&lt; ptrb.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="智能指针的使用">智能指针的使用</h2>
<h3 id="Deleter">Deleter</h3>
<p><code>unique_ptr</code> 的声明为：<code>std::unique_ptr&lt;T, Deleter&gt;::unique_ptr</code><br>
前面已经说过，智能指针在析构的时候除了 <code>delete</code> 堆上空间，还可以关闭文件、释放同步锁等，<code>unique_ptr</code> 可以让我们自定义指针释放资源的方式，方法是<strong>传入一个函数对象</strong>，我们用 <em>lambda</em> 表达式来简单实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::unique_ptr&lt;FILE, std::function&lt;void(FILE*)&gt;&gt; openFile(fopen("config.yml", "w"), [](FILE* fp)-&gt;void&#123; fclose(fp); &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>shared_ptr</code> 的 <code>Deleter</code> 的使用方法与 <code>unique_ptr</code> 稍有不同：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span> &#123;</span></span><br><span class="line">    foo() &#123;&#125;</span><br><span class="line">    ~foo() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">deleter</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(func* fp)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> fp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;foo&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> foo, deleter())</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多线程场景下的智能指针">多线程场景下的智能指针</h3>
<p>多个线程访问同一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他操作，调用这个对象的行为都可以获得正确的结果，那么这个对象就是线程安全的。</p>
<p><code>shared_ptr/weak_ptr</code> 的线程安全可以分为两个部分讨论：</p>
<ul>
<li>
<p><code>shared_ptr/weak_ptr</code> 管理的对象是否是线程安全的</p>
</li>
<li>
<p><code>shared_ptr/weak_ptr</code> 对象本身是否是线程安全的</p>
</li>
</ul>
<p>第一个问题，<code>shared_ptr/weak_ptr</code> 能够实现多线程下其管理的对象是线程安全的，多线程下，一个常见的错误是当一个线程已经将堆上的对象析构了，此时另一个线程去访问已经析构了的对象，产生未定义行为。</p>
<p><em>muduo</em> 网络库中的 <em>Observable</em> 类给出了一个解决方法：通过 <code>weak_ptr</code> 探查对象的生死：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register_</span><span class="params">(<span class="keyword">const</span> weak_ptr&lt;Observer&gt; x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> MutexLock mutex_;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weak_ptr&lt;Observer&gt;&gt; observers_;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;weak_ptr&lt;Observer&gt;&gt;::iterator Iterator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Observable::notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">    Iterator it = observers_.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span> (it != observers_.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        <span class="comment">// 遍历 vector 依次尝试 promote weak_ptr</span></span><br><span class="line">        <span class="comment">// lock 是线程安全的</span></span><br><span class="line">        <span class="function"><span class="built_in">shared_ptr</span>&lt;Observer&gt; <span class="title">obj</span><span class="params">(it-&gt;lock())</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">            obj-&gt;update();</span><br><span class="line">            ++it;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// promote 失败说明对象已经销毁，从 vector 中删除 weak_ptr</span></span><br><span class="line">            it = observers_.erase(it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二个问题，<code>shared_ptr</code> 本身并不是线程安全的，它的引用计数是安全无锁的，但是对象的读写不是，因为 <code>shared_ptr</code> 有两个数据成员，读写操作不能原子化。</p>
<p>如果要通过多个线程读写同一个 <code>shared_ptr</code> 对象，需要加锁。<br>
继续看一个 <em>muduo</em> 网络库中的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;foo&gt; localPtr;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">        localPtr = globalPtr;</span><br><span class="line">    &#125;</span><br><span class="line">    doit(localPtr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">shared_ptr</span>&lt;foo&gt; <span class="title">newPtr</span><span class="params">(<span class="keyword">new</span> foo)</span></span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">        globalPtr = newPtr;</span><br><span class="line">    &#125;</span><br><span class="line">    doit(newPtr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考文献：</p>
<p><a href="https://book.douban.com/subject/20471211/" target="_blank" rel="noopener">Linux 多线程服务端编程</a><br>
<a href="https://book.douban.com/subject/25923597/" target="_blank" rel="noopener">Effective Modern C++</a><br>
<a href="https://en.cppreference.com/w/Main_Page" target="_blank" rel="noopener">cppreference</a></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Smart-Pointer</tag>
        <tag>RAII</tag>
      </tags>
  </entry>
  <entry>
    <title>使用简单的逻辑方法进行独立思考【转】</title>
    <url>/posts/8cfab1d1/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>可考证的数据很重要很重要很重要</li>
<li>理解集合的包含与被包含，以小见大往往不具有科学性严谨性</li>
<li>谨慎颠倒因果关系的事情与混淆无关事情之间的因果关系</li>
<li>做事要找到靠谱的基准线</li>
<li>思考要深入，要高维</li>
</ul>
</blockquote>
<a id="more"></a>
<p>这是一个非常复杂的世界，这个世界上有很多各式各样的观点和思维方式，作为一个程序员的我，也会有程序员的思维方式，程序员的思维方式更接近数学的思维方式，数学的思维方式让可以很容易地理清楚这个混乱的世界，其实，并不需要太复杂的数学逻辑，只需要使用一些简单的数学方法，就可以大幅提升自己的认识能力，所以，在这里，记录一篇我自己的思维方式，一方面给大家做个参考，另一方面也供更高阶的人给我进行指正。算是“开源我的思维方式”，开放不仅仅是为了输出，更是为了看看有没有更好的方式。</p>
<p>我的思维方式中，使用数学逻辑的方式进行思考，通常来说，我会使用五步思考的方式：</p>
<p><strong>第一步：信息数据可考证</strong>。如果一个观点或是一个见解的数据是错误的，那么就会造成后面的观点全是错的，所以，<em><strong>首要的是要进行数据的查证或考证</strong></em>。一般来说，如果一篇文章的作者足够严谨的话，他的需要给他的数据建立相关的引用或是可以考证的方法方式。如果一篇文章中出现的是，“有关专家表明”、“美国科学家证明”、“经济学家指出”，但是没有任出处，也没有点明这个专家或是科学家的名字，或是，也没有说明或引用让读者可以自己去验证的方法。那么，其引用的话或是数据是无法考证的，如果是无法考证的，那么，这篇文章的水份就非常大了。一般来说，当我读到一篇文章中的东西没有可考证的来源或是方法时，通常来说，我就不会再读了，因为这篇文章的价值已经不大了，如果我关心这篇文章中的东西，我会改为自己去查找的方式，虽然变“重”了，但是很安全。（所以，像 Wikipedia 这样的网站是我经常去获得信息的地方，因为信息可以被考证是其基本价值观）</p>
<p><strong>第二步：处理集合和其包含关系</strong>。这是一个非常简单的人人都会的数学逻辑。比如：哲学家是人，柏拉图是哲学家，所以，柏拉图是人。就是一个在包含关系下的推理。你不要小看这个简单的逻辑，其实很多人并不会很好的应用，相反，<em><strong>当感情支配了他们以后，他们会以点代面，以特例代替普遍性</strong></em>。比如，地图炮就是一种，他们看到了多个案例，他们就开始把这个案例上升上更大的范围，比如：河南人新疆人都是小偷，上海人都是小市民。日本人都是变态和反人类……等等。除了这些地图炮外，还有否定整个人的，比如一个人犯了个错或是性格上有缺陷，就会把整个人全盘否定掉，员工抢个月饼就上升到其价值观有问题……。在数学的逻辑包含中，<em><strong>超集的定义可以适用于子集，通过子集的特征可以对超集进行探索，但是没法定义超集</strong></em>。另外，集合的大小也是一个很重要的事，幸存者偏差会是一个很容易让人掉下去的陷阱，因为可能会有很大的样本集可能在你的视线盲区。</p>
<p><strong>第三步：处理逻辑因果关系</strong>。所谓因果关系，其实就是分辨充分条件、必要条件和充分必要条件，然后处理其中的逻辑是否有关联性，而且有非常强的因果关系。没有能力分辨充分必要条件处理因果关系是很多人的硬伤。就像我在《<a href="https://coolshell.cn/articles/19271.html" target="_blank" rel="noopener">努力就会成功</a>》中说的一样，“努力” 和 “成功”是否有因果关系？各种逻辑混淆、概念偷换、模糊因果、似是而非全是在这里。比如：掩耳盗铃、刻舟求剑就是因果关系混乱的表现。<em><strong>人们会经常地混淆两个看来一起发生，但是并没有关联在一起的事</strong></em>。因果关系是最容易被模糊和偷换的，比如：很多人都容易混淆“加班”就会有“产出”，混淆了“行动”就会有“结果”，混淆了“抵制”就会赢得“尊重”，混淆了“批评”等于“反对”……等等。除了这些以外，微信公众号里的很多时评文章，他们的文章中的结论和其论据是没有因果关系的，好多文章就是混淆、模糊、偷换……<em><strong>因果关系出问题的文章读多了是对大脑有损伤的，要尽量远离</strong></em>。</p>
<p><strong>第四步：找到靠谱的基准线</strong>。就像我们写代码一样，我们都是会去找一些最佳实践或是业内标准，原因是因为，这样的东西都是经过长时间被这个世界上很多人Review过的，是值得依赖和靠谱的，他们会考虑到很多你没有考虑过的问题。所以，你也会看到很多时评都会找欧美发达国家的作参考的做法，因为毕竟人家的文化是相对比较文明、科学、开放和先进的。找到世界或是国际的通行标准，会更容易让人进步。比如：<em><strong>以开放包容加强沟通的心态，就会比封闭抵制敌对的心态要好得多得多，智者建桥，愚者建墙</strong></em>。当然，我们也开始发现，有一些事上，有利于自己的就对标，不利于自己的就不对标，而且，除了好的事，不好的事也在找欧美作对标，于是开始“多基准线”和“乱基准线”，这种方式需要我们小心分辨。</p>
<p><strong>第五步：更为深入和高维的思考</strong>。如果一件事情只在表面上进行思考其实只是一种浅度思考，在 Amazon，线上系统出现故障的时候，需要写一个 Correction of Errors 的报告，其中需要 Ask 5 Whys（参看 Wikipedia 的 Five Whys 词条），这种思考方式可以让你不断追问到深层次的本质问题，会让你自己做大量的调查和研究，让你不会成为一个只会在表面上进行思考的简单动物。比如：当你看到有出乎你意料的事件发生时（比如负面的暴力事件），你需要问一下，为什么会发生，原因是什么？然后罗列尽可能全的原因，再不断地追问并拷证下去（这跟写程序一样，需要从正向案例和负向案例进行考虑分析，才可能写出健壮性很强的代码），我们才会得出一个比较健壮的答案或结构。</p>
<p>需要注意的是，在上述的这五种思维方式下，你的思考是不可能快得起来的，这是一个“慢思考”（注：如果读过《<a href="https://book.douban.com/subject/10785583//" target="_blank" rel="noopener">思考，快与慢</a>》这本书的人就知道我在说什么），<em><strong>独立思考是需要使用大脑中的“慢系统”，慢系统是反人性的，所以，能真正做到独立思考的人很少</strong></em>。更多的人的“独立思考”其实只不过是毫无章法的乱思考罢了。</p>
<p>通过上述的这五点，我相信你是很容易识别或是分辨出哪些信息是靠谱的，哪些信息是很扯的，甚至会改善你自己的言论和思考。但是，请注意，这些方法并不能让你获得真理或是真相。但是这也够了，一个人如果拥有了能够分辨是非的能力，也是很不错的了。虽然不知道事实是什么，但是你也不会盲从和偏信，从而不会被人煽动，而成为幕后黑手的的一只“肉鸡”。</p>
<p>多说两句，下面是一些我个人的一些实践：</p>
<p>当新闻报道报道的不是客观事实，而是加入了很多观点，那么这篇新闻报道是不可信的。<br>
对于评论性的文章，没有充足权威可信的论据时，不能完全相信。<br>
不是当事人，不是见证人，还要装作自己是知情的……不知道这种人的自信怎么来的？<br>
信息不公开的，并有意屏蔽信息的，不能作为可信的信息源。<br>
当出现大是或是大非的事时，一定要非常小心，这个世界不存在完全的美和完全的丑，这样的观点通常来说都是危险的，此时要多看看不同角度的报道和评论，要多收集一些信息，还要多问问为什么。<br>
欢迎你告诉我一些你的实践和思维方式。</p>
<p>转载自陈皓 CoolShell 博客<br>
原文链接：<a href="https://coolshell.cn/articles/20533.html" target="_blank" rel="noopener">使用简单的逻辑方法进行独立思考</a></p>
]]></content>
      <categories>
        <category>Perception</category>
      </categories>
      <tags>
        <tag>Perception</tag>
      </tags>
  </entry>
</search>
